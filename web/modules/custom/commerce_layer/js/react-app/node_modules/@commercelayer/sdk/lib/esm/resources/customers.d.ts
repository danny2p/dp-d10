import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { CustomerGroup, CustomerGroupType } from './customer_groups';
import type { CustomerAddress } from './customer_addresses';
import type { CustomerPaymentSource } from './customer_payment_sources';
import type { CustomerSubscription } from './customer_subscriptions';
import type { Order } from './orders';
import type { OrderSubscription } from './order_subscriptions';
import type { Return } from './returns';
import type { SkuList } from './sku_lists';
import type { Attachment } from './attachments';
import type { Event } from './events';
import type { Tag, TagType } from './tags';
type CustomerType = 'customers';
type CustomerRel = ResourceRel & {
    type: CustomerType;
};
type CustomerGroupRel = ResourceRel & {
    type: CustomerGroupType;
};
type TagRel = ResourceRel & {
    type: TagType;
};
interface Customer extends Resource {
    readonly type: CustomerType;
    email: string;
    status: 'prospect' | 'acquired' | 'repeat';
    has_password?: boolean | null;
    total_orders_count?: number | null;
    customer_group?: CustomerGroup | null;
    customer_addresses?: CustomerAddress[] | null;
    customer_payment_sources?: CustomerPaymentSource[] | null;
    customer_subscriptions?: CustomerSubscription[] | null;
    orders?: Order[] | null;
    order_subscriptions?: OrderSubscription[] | null;
    returns?: Return[] | null;
    sku_lists?: SkuList[] | null;
    attachments?: Attachment[] | null;
    events?: Event[] | null;
    tags?: Tag[] | null;
}
interface CustomerCreate extends ResourceCreate {
    email: string;
    password?: string | null;
    customer_group?: CustomerGroupRel | null;
    tags?: TagRel[] | null;
}
interface CustomerUpdate extends ResourceUpdate {
    email?: string | null;
    password?: string | null;
    customer_group?: CustomerGroupRel | null;
    tags?: TagRel[] | null;
}
declare class Customers extends ApiResource<Customer> {
    static readonly TYPE: CustomerType;
    create(resource: CustomerCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    update(resource: CustomerUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    customer_group(customerId: string | Customer, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerGroup>;
    customer_addresses(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<CustomerAddress>>;
    customer_payment_sources(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<CustomerPaymentSource>>;
    customer_subscriptions(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<CustomerSubscription>>;
    orders(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Order>>;
    order_subscriptions(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<OrderSubscription>>;
    returns(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Return>>;
    sku_lists(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<SkuList>>;
    attachments(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    events(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    tags(customerId: string | Customer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Tag>>;
    isCustomer(resource: any): resource is Customer;
    relationship(id: string | ResourceId | null): CustomerRel;
    type(): CustomerType;
}
export default Customers;
export type { Customer, CustomerCreate, CustomerUpdate, CustomerType };
