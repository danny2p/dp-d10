import { ApiResource } from '../resource';
class GiftCardRecipients extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: GiftCardRecipients.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: GiftCardRecipients.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: GiftCardRecipients.TYPE } : id, options);
    }
    async customer(giftCardRecipientId, params, options) {
        const _giftCardRecipientId = giftCardRecipientId.id || giftCardRecipientId;
        return this.resources.fetch({ type: 'customers' }, `gift_card_recipients/${_giftCardRecipientId}/customer`, params, options);
    }
    async attachments(giftCardRecipientId, params, options) {
        const _giftCardRecipientId = giftCardRecipientId.id || giftCardRecipientId;
        return this.resources.fetch({ type: 'attachments' }, `gift_card_recipients/${_giftCardRecipientId}/attachments`, params, options);
    }
    async versions(giftCardRecipientId, params, options) {
        const _giftCardRecipientId = giftCardRecipientId.id || giftCardRecipientId;
        return this.resources.fetch({ type: 'versions' }, `gift_card_recipients/${_giftCardRecipientId}/versions`, params, options);
    }
    isGiftCardRecipient(resource) {
        return resource.type && (resource.type === GiftCardRecipients.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: GiftCardRecipients.TYPE } : { id: id.id, type: GiftCardRecipients.TYPE };
    }
    type() {
        return GiftCardRecipients.TYPE;
    }
}
GiftCardRecipients.TYPE = 'gift_card_recipients';
export default GiftCardRecipients;
