import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { KlarnaPayment, KlarnaPaymentType } from './klarna_payments';
type KlarnaGatewayType = 'klarna_gateways';
type KlarnaGatewayRel = ResourceRel & {
    type: KlarnaGatewayType;
};
type KlarnaPaymentRel = ResourceRel & {
    type: KlarnaPaymentType;
};
interface KlarnaGateway extends Resource {
    readonly type: KlarnaGatewayType;
    name: string;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    klarna_payments?: KlarnaPayment[] | null;
}
interface KlarnaGatewayCreate extends ResourceCreate {
    name: string;
    country_code: string;
    api_key: string;
    api_secret: string;
    klarna_payments?: KlarnaPaymentRel[] | null;
}
interface KlarnaGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    country_code?: string | null;
    api_key?: string | null;
    api_secret?: string | null;
    klarna_payments?: KlarnaPaymentRel[] | null;
}
declare class KlarnaGateways extends ApiResource<KlarnaGateway> {
    static readonly TYPE: KlarnaGatewayType;
    create(resource: KlarnaGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<KlarnaGateway>;
    update(resource: KlarnaGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<KlarnaGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(klarnaGatewayId: string | KlarnaGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(klarnaGatewayId: string | KlarnaGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    klarna_payments(klarnaGatewayId: string | KlarnaGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<KlarnaPayment>>;
    isKlarnaGateway(resource: any): resource is KlarnaGateway;
    relationship(id: string | ResourceId | null): KlarnaGatewayRel;
    type(): KlarnaGatewayType;
}
export default KlarnaGateways;
export type { KlarnaGateway, KlarnaGatewayCreate, KlarnaGatewayUpdate, KlarnaGatewayType };
