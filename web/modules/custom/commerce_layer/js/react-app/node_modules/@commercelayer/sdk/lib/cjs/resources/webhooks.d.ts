import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { EventCallback } from './event_callbacks';
import type { Version } from './versions';
type WebhookType = 'webhooks';
type WebhookRel = ResourceRel & {
    type: WebhookType;
};
interface Webhook extends Resource {
    readonly type: WebhookType;
    name?: string | null;
    topic: string;
    callback_url: string;
    include_resources?: string[] | null;
    circuit_state?: string | null;
    circuit_failure_count?: number | null;
    shared_secret: string;
    last_event_callbacks?: EventCallback[] | null;
    versions?: Version[] | null;
}
interface WebhookCreate extends ResourceCreate {
    name?: string | null;
    topic: string;
    callback_url: string;
    include_resources?: string[] | null;
}
interface WebhookUpdate extends ResourceUpdate {
    name?: string | null;
    topic?: string | null;
    callback_url?: string | null;
    include_resources?: string[] | null;
    _reset_circuit?: boolean | null;
}
declare class Webhooks extends ApiResource<Webhook> {
    static readonly TYPE: WebhookType;
    create(resource: WebhookCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Webhook>;
    update(resource: WebhookUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Webhook>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    last_event_callbacks(webhookId: string | Webhook, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<EventCallback>>;
    versions(webhookId: string | Webhook, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _reset_circuit(id: string | Webhook, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Webhook>;
    isWebhook(resource: any): resource is Webhook;
    relationship(id: string | ResourceId | null): WebhookRel;
    type(): WebhookType;
}
export default Webhooks;
export type { Webhook, WebhookCreate, WebhookUpdate, WebhookType };
