import { ApiResource } from '../resource';
class Returns extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Returns.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Returns.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Returns.TYPE } : id, options);
    }
    async order(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'orders' }, `returns/${_returnId}/order`, params, options);
    }
    async customer(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'customers' }, `returns/${_returnId}/customer`, params, options);
    }
    async stock_location(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'stock_locations' }, `returns/${_returnId}/stock_location`, params, options);
    }
    async origin_address(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'addresses' }, `returns/${_returnId}/origin_address`, params, options);
    }
    async destination_address(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'addresses' }, `returns/${_returnId}/destination_address`, params, options);
    }
    async return_line_items(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'return_line_items' }, `returns/${_returnId}/return_line_items`, params, options);
    }
    async attachments(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'attachments' }, `returns/${_returnId}/attachments`, params, options);
    }
    async events(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'events' }, `returns/${_returnId}/events`, params, options);
    }
    async tags(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'tags' }, `returns/${_returnId}/tags`, params, options);
    }
    async versions(returnId, params, options) {
        const _returnId = returnId.id || returnId;
        return this.resources.fetch({ type: 'versions' }, `returns/${_returnId}/versions`, params, options);
    }
    async _request(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _request: true }, params, options);
    }
    async _approve(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _approve: true }, params, options);
    }
    async _cancel(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _cancel: true }, params, options);
    }
    async _ship(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _ship: true }, params, options);
    }
    async _reject(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _reject: true }, params, options);
    }
    async _receive(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _receive: true }, params, options);
    }
    async _restock(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _restock: true }, params, options);
    }
    async _archive(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _archive: true }, params, options);
    }
    async _unarchive(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Returns.TYPE, _unarchive: true }, params, options);
    }
    isReturn(resource) {
        return resource.type && (resource.type === Returns.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Returns.TYPE } : { id: id.id, type: Returns.TYPE };
    }
    type() {
        return Returns.TYPE;
    }
}
Returns.TYPE = 'returns';
export default Returns;
