import { ApiResource } from '../resource';
class CheckoutComPayments extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CheckoutComPayments.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CheckoutComPayments.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CheckoutComPayments.TYPE } : id, options);
    }
    async order(checkoutComPaymentId, params, options) {
        const _checkoutComPaymentId = checkoutComPaymentId.id || checkoutComPaymentId;
        return this.resources.fetch({ type: 'orders' }, `checkout_com_payments/${_checkoutComPaymentId}/order`, params, options);
    }
    async payment_gateway(checkoutComPaymentId, params, options) {
        const _checkoutComPaymentId = checkoutComPaymentId.id || checkoutComPaymentId;
        return this.resources.fetch({ type: 'payment_gateways' }, `checkout_com_payments/${_checkoutComPaymentId}/payment_gateway`, params, options);
    }
    async versions(checkoutComPaymentId, params, options) {
        const _checkoutComPaymentId = checkoutComPaymentId.id || checkoutComPaymentId;
        return this.resources.fetch({ type: 'versions' }, `checkout_com_payments/${_checkoutComPaymentId}/versions`, params, options);
    }
    async _details(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: CheckoutComPayments.TYPE, _details: true }, params, options);
    }
    async _refresh(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: CheckoutComPayments.TYPE, _refresh: true }, params, options);
    }
    isCheckoutComPayment(resource) {
        return resource.type && (resource.type === CheckoutComPayments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CheckoutComPayments.TYPE } : { id: id.id, type: CheckoutComPayments.TYPE };
    }
    type() {
        return CheckoutComPayments.TYPE;
    }
}
CheckoutComPayments.TYPE = 'checkout_com_payments';
export default CheckoutComPayments;
