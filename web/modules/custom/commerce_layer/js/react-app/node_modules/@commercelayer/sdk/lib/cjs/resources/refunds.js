"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Refunds extends resource_1.ApiResource {
    async order(refundId, params, options) {
        const _refundId = refundId.id || refundId;
        return this.resources.fetch({ type: 'orders' }, `refunds/${_refundId}/order`, params, options);
    }
    async attachments(refundId, params, options) {
        const _refundId = refundId.id || refundId;
        return this.resources.fetch({ type: 'attachments' }, `refunds/${_refundId}/attachments`, params, options);
    }
    async versions(refundId, params, options) {
        const _refundId = refundId.id || refundId;
        return this.resources.fetch({ type: 'versions' }, `refunds/${_refundId}/versions`, params, options);
    }
    async reference_capture(refundId, params, options) {
        const _refundId = refundId.id || refundId;
        return this.resources.fetch({ type: 'captures' }, `refunds/${_refundId}/reference_capture`, params, options);
    }
    async events(refundId, params, options) {
        const _refundId = refundId.id || refundId;
        return this.resources.fetch({ type: 'events' }, `refunds/${_refundId}/events`, params, options);
    }
    isRefund(resource) {
        return resource.type && (resource.type === Refunds.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Refunds.TYPE } : { id: id.id, type: Refunds.TYPE };
    }
    type() {
        return Refunds.TYPE;
    }
}
Refunds.TYPE = 'refunds';
exports.default = Refunds;
