import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { SatispayPayment, SatispayPaymentType } from './satispay_payments';
type SatispayGatewayType = 'satispay_gateways';
type SatispayGatewayRel = ResourceRel & {
    type: SatispayGatewayType;
};
type SatispayPaymentRel = ResourceRel & {
    type: SatispayPaymentType;
};
interface SatispayGateway extends Resource {
    readonly type: SatispayGatewayType;
    name: string;
    token: string;
    key_id: string;
    webhook_endpoint_url?: string | null;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    satispay_payments?: SatispayPayment[] | null;
}
interface SatispayGatewayCreate extends ResourceCreate {
    name: string;
    token: string;
    satispay_payments?: SatispayPaymentRel[] | null;
}
interface SatispayGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    satispay_payments?: SatispayPaymentRel[] | null;
}
declare class SatispayGateways extends ApiResource<SatispayGateway> {
    static readonly TYPE: SatispayGatewayType;
    create(resource: SatispayGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SatispayGateway>;
    update(resource: SatispayGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SatispayGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(satispayGatewayId: string | SatispayGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(satispayGatewayId: string | SatispayGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    satispay_payments(satispayGatewayId: string | SatispayGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<SatispayPayment>>;
    isSatispayGateway(resource: any): resource is SatispayGateway;
    relationship(id: string | ResourceId | null): SatispayGatewayRel;
    type(): SatispayGatewayType;
}
export default SatispayGateways;
export type { SatispayGateway, SatispayGatewayCreate, SatispayGatewayUpdate, SatispayGatewayType };
