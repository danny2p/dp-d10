import { ApiResource } from '../resource';
class StockLocations extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: StockLocations.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: StockLocations.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: StockLocations.TYPE } : id, options);
    }
    async address(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'addresses' }, `stock_locations/${_stockLocationId}/address`, params, options);
    }
    async inventory_stock_locations(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'inventory_stock_locations' }, `stock_locations/${_stockLocationId}/inventory_stock_locations`, params, options);
    }
    async inventory_return_locations(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'inventory_return_locations' }, `stock_locations/${_stockLocationId}/inventory_return_locations`, params, options);
    }
    async stock_items(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'stock_items' }, `stock_locations/${_stockLocationId}/stock_items`, params, options);
    }
    async stock_transfers(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'stock_transfers' }, `stock_locations/${_stockLocationId}/stock_transfers`, params, options);
    }
    async attachments(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'attachments' }, `stock_locations/${_stockLocationId}/attachments`, params, options);
    }
    async versions(stockLocationId, params, options) {
        const _stockLocationId = stockLocationId.id || stockLocationId;
        return this.resources.fetch({ type: 'versions' }, `stock_locations/${_stockLocationId}/versions`, params, options);
    }
    isStockLocation(resource) {
        return resource.type && (resource.type === StockLocations.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: StockLocations.TYPE } : { id: id.id, type: StockLocations.TYPE };
    }
    type() {
        return StockLocations.TYPE;
    }
}
StockLocations.TYPE = 'stock_locations';
export default StockLocations;
