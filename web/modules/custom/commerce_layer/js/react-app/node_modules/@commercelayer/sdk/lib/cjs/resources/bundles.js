"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Bundles extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Bundles.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Bundles.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Bundles.TYPE } : id, options);
    }
    async market(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'markets' }, `bundles/${_bundleId}/market`, params, options);
    }
    async sku_list(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'sku_lists' }, `bundles/${_bundleId}/sku_list`, params, options);
    }
    async skus(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'skus' }, `bundles/${_bundleId}/skus`, params, options);
    }
    async attachments(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'attachments' }, `bundles/${_bundleId}/attachments`, params, options);
    }
    async events(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'events' }, `bundles/${_bundleId}/events`, params, options);
    }
    async tags(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'tags' }, `bundles/${_bundleId}/tags`, params, options);
    }
    async versions(bundleId, params, options) {
        const _bundleId = bundleId.id || bundleId;
        return this.resources.fetch({ type: 'versions' }, `bundles/${_bundleId}/versions`, params, options);
    }
    async _compute_price_amount(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Bundles.TYPE, _compute_price_amount: true }, params, options);
    }
    async _compute_compare_at_amount(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Bundles.TYPE, _compute_compare_at_amount: true }, params, options);
    }
    isBundle(resource) {
        return resource.type && (resource.type === Bundles.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Bundles.TYPE } : { id: id.id, type: Bundles.TYPE };
    }
    type() {
        return Bundles.TYPE;
    }
}
Bundles.TYPE = 'bundles';
exports.default = Bundles;
