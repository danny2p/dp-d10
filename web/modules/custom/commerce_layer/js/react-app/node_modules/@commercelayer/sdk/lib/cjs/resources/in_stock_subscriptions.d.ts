import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Market, MarketType } from './markets';
import type { Customer, CustomerType } from './customers';
import type { Sku, SkuType } from './skus';
import type { Event } from './events';
import type { Version } from './versions';
type InStockSubscriptionType = 'in_stock_subscriptions';
type InStockSubscriptionRel = ResourceRel & {
    type: InStockSubscriptionType;
};
type MarketRel = ResourceRel & {
    type: MarketType;
};
type CustomerRel = ResourceRel & {
    type: CustomerType;
};
type SkuRel = ResourceRel & {
    type: SkuType;
};
interface InStockSubscription extends Resource {
    readonly type: InStockSubscriptionType;
    status: 'active' | 'inactive' | 'notified';
    customer_email?: string | null;
    sku_code?: string | null;
    stock_threshold?: number | null;
    market?: Market | null;
    customer?: Customer | null;
    sku?: Sku | null;
    events?: Event[] | null;
    versions?: Version[] | null;
}
interface InStockSubscriptionCreate extends ResourceCreate {
    customer_email?: string | null;
    sku_code?: string | null;
    stock_threshold?: number | null;
    market: MarketRel;
    customer: CustomerRel;
    sku: SkuRel;
}
interface InStockSubscriptionUpdate extends ResourceUpdate {
    sku_code?: string | null;
    stock_threshold?: number | null;
    _activate?: boolean | null;
    _deactivate?: boolean | null;
    market?: MarketRel | null;
    customer?: CustomerRel | null;
    sku?: SkuRel | null;
}
declare class InStockSubscriptions extends ApiResource<InStockSubscription> {
    static readonly TYPE: InStockSubscriptionType;
    create(resource: InStockSubscriptionCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<InStockSubscription>;
    update(resource: InStockSubscriptionUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<InStockSubscription>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    market(inStockSubscriptionId: string | InStockSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Market>;
    customer(inStockSubscriptionId: string | InStockSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    sku(inStockSubscriptionId: string | InStockSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Sku>;
    events(inStockSubscriptionId: string | InStockSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    versions(inStockSubscriptionId: string | InStockSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _activate(id: string | InStockSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<InStockSubscription>;
    _deactivate(id: string | InStockSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<InStockSubscription>;
    isInStockSubscription(resource: any): resource is InStockSubscription;
    relationship(id: string | ResourceId | null): InStockSubscriptionRel;
    type(): InStockSubscriptionType;
}
export default InStockSubscriptions;
export type { InStockSubscription, InStockSubscriptionCreate, InStockSubscriptionUpdate, InStockSubscriptionType };
