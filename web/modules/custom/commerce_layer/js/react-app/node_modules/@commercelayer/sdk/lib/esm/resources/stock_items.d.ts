import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { StockLocation, StockLocationType } from './stock_locations';
import type { Sku, SkuType } from './skus';
import type { ReservedStock } from './reserved_stocks';
import type { StockReservation } from './stock_reservations';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type StockItemType = 'stock_items';
type StockItemRel = ResourceRel & {
    type: StockItemType;
};
type StockLocationRel = ResourceRel & {
    type: StockLocationType;
};
type SkuRel = ResourceRel & {
    type: SkuType;
};
interface StockItem extends Resource {
    readonly type: StockItemType;
    sku_code?: string | null;
    quantity: number;
    stock_location?: StockLocation | null;
    sku?: Sku | null;
    reserved_stock?: ReservedStock | null;
    stock_reservations?: StockReservation[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface StockItemCreate extends ResourceCreate {
    sku_code?: string | null;
    quantity: number;
    stock_location: StockLocationRel;
    sku?: SkuRel | null;
}
interface StockItemUpdate extends ResourceUpdate {
    sku_code?: string | null;
    quantity?: number | null;
    stock_location?: StockLocationRel | null;
    sku?: SkuRel | null;
}
declare class StockItems extends ApiResource<StockItem> {
    static readonly TYPE: StockItemType;
    create(resource: StockItemCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockItem>;
    update(resource: StockItemUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockItem>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    stock_location(stockItemId: string | StockItem, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockLocation>;
    sku(stockItemId: string | StockItem, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Sku>;
    reserved_stock(stockItemId: string | StockItem, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ReservedStock>;
    stock_reservations(stockItemId: string | StockItem, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<StockReservation>>;
    attachments(stockItemId: string | StockItem, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(stockItemId: string | StockItem, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isStockItem(resource: any): resource is StockItem;
    relationship(id: string | ResourceId | null): StockItemRel;
    type(): StockItemType;
}
export default StockItems;
export type { StockItem, StockItemCreate, StockItemUpdate, StockItemType };
