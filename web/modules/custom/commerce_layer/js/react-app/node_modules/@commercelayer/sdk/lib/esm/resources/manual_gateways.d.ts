import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
type ManualGatewayType = 'manual_gateways';
type ManualGatewayRel = ResourceRel & {
    type: ManualGatewayType;
};
interface ManualGateway extends Resource {
    readonly type: ManualGatewayType;
    name: string;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
}
interface ManualGatewayCreate extends ResourceCreate {
    name: string;
}
interface ManualGatewayUpdate extends ResourceUpdate {
    name?: string | null;
}
declare class ManualGateways extends ApiResource<ManualGateway> {
    static readonly TYPE: ManualGatewayType;
    create(resource: ManualGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ManualGateway>;
    update(resource: ManualGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ManualGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(manualGatewayId: string | ManualGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(manualGatewayId: string | ManualGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isManualGateway(resource: any): resource is ManualGateway;
    relationship(id: string | ResourceId | null): ManualGatewayRel;
    type(): ManualGatewayType;
}
export default ManualGateways;
export type { ManualGateway, ManualGatewayCreate, ManualGatewayUpdate, ManualGatewayType };
