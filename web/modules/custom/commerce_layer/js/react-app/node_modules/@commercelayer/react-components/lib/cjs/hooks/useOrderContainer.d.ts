import { type createOrder, type OrderState, type addToCart } from '../reducers/OrderReducer';
type TAddToCartParams = Omit<Parameters<typeof addToCart>[number], 'buyNowMode' | 'state' | 'dispatch' | 'setLocalOrder' | 'errors' | 'checkoutUrl' | 'persistKey' | 'config'>;
type TCreateCartParams = Pick<Parameters<typeof createOrder>[number], 'orderAttributes' | 'orderMetadata'>;
interface TReturnOrder extends Omit<OrderState, 'loading' | 'include' | 'includeLoaded' | 'withoutIncludes' | 'orderId'> {
    reloadOrder: () => Promise<OrderState['order']>;
    addToCart: (params: TAddToCartParams) => ReturnType<typeof addToCart>;
    createOrder: (params: TCreateCartParams) => Promise<string | undefined>;
}
export declare function useOrderContainer(): TReturnOrder;
export default useOrderContainer;
