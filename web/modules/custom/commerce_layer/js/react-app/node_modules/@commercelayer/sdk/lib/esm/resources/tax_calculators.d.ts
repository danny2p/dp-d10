import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsList } from '../query';
import type { Market } from './markets';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type TaxCalculatorType = 'tax_calculators';
type TaxCalculatorRel = ResourceRel & {
    type: TaxCalculatorType;
};
interface TaxCalculator extends Resource {
    readonly type: TaxCalculatorType;
    name: string;
    markets?: Market[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
declare class TaxCalculators extends ApiResource<TaxCalculator> {
    static readonly TYPE: TaxCalculatorType;
    markets(taxCalculatorId: string | TaxCalculator, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Market>>;
    attachments(taxCalculatorId: string | TaxCalculator, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(taxCalculatorId: string | TaxCalculator, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isTaxCalculator(resource: any): resource is TaxCalculator;
    relationship(id: string | ResourceId | null): TaxCalculatorRel;
    type(): TaxCalculatorType;
}
export default TaxCalculators;
export type { TaxCalculator, TaxCalculatorType };
