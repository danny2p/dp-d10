import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel } from '../resource';
import type { QueryParamsRetrieve } from '../query';
type TagType = 'tags';
type TagRel = ResourceRel & {
    type: TagType;
};
interface Tag extends Resource {
    readonly type: TagType;
    name: string;
}
interface TagCreate extends ResourceCreate {
    name: string;
}
interface TagUpdate extends ResourceUpdate {
    name?: string | null;
}
declare class Tags extends ApiResource<Tag> {
    static readonly TYPE: TagType;
    create(resource: TagCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Tag>;
    update(resource: TagUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Tag>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    isTag(resource: any): resource is Tag;
    relationship(id: string | ResourceId | null): TagRel;
    type(): TagType;
}
export default Tags;
export type { Tag, TagCreate, TagUpdate, TagType };
