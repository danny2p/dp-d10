import { type ApiClientInitConfig } from './client';
import type { QueryParamsRetrieve, QueryParamsList, QueryFilter, QueryParams } from './query';
import type { ResourceTypeLock } from './api';
import type { InterceptorManager } from './interceptor';
type ResourceNull = {
    id: null;
} & ResourceType;
type ResourceRel = ResourceId | ResourceNull;
type Metadata = Record<string, any>;
interface ResourceType {
    readonly type: ResourceTypeLock;
}
interface ResourceId extends ResourceType {
    readonly id: string;
}
interface ResourceBase {
    reference?: string | null;
    reference_origin?: string | null;
    metadata?: Metadata;
}
interface Resource extends ResourceBase, ResourceId {
    readonly created_at: string;
    readonly updated_at: string;
}
interface ResourceCreate extends ResourceBase {
}
interface ResourceUpdate extends ResourceBase {
    readonly id: string;
}
type ListMeta = {
    readonly pageCount: number;
    readonly recordCount: number;
    readonly currentPage: number;
    readonly recordsPerPage: number;
};
declare class ListResponse<R> extends Array<R> {
    readonly meta: ListMeta;
    constructor(meta: ListMeta, data: R[]);
    first(): R | undefined;
    last(): R | undefined;
    get(index: number): R | undefined;
    hasNextPage(): boolean;
    hasPrevPage(): boolean;
    getRecordCount(): number;
    getPageCount(): number;
    get recordCount(): number;
    get pageCount(): number;
}
export type { Metadata, ResourceType, ResourceId, Resource, ResourceCreate, ResourceUpdate, ListResponse, ListMeta, ResourceRel };
type ResourceAdapterConfig = {};
type ResourcesInitConfig = ResourceAdapterConfig & ApiClientInitConfig;
type ResourcesConfig = Partial<ResourcesInitConfig>;
declare class ResourceAdapter {
    #private;
    constructor(config: ResourcesInitConfig);
    get interceptors(): InterceptorManager;
    private localConfig;
    config(config: ResourcesConfig): ResourceAdapter;
    singleton<R extends Resource>(resource: ResourceType, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
    retrieve<R extends Resource>(resource: ResourceId, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
    list<R extends Resource>(resource: ResourceType, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<R>>;
    create<C extends ResourceCreate, R extends Resource>(resource: C & ResourceType, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
    update<U extends ResourceUpdate, R extends Resource>(resource: U & ResourceId, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
    delete(resource: ResourceId, options?: ResourcesConfig): Promise<void>;
    fetch<R extends Resource>(resource: string | ResourceType, path: string, params?: QueryParams, options?: ResourcesConfig): Promise<R | ListResponse<R>>;
}
declare abstract class ApiResourceBase<R extends Resource> {
    static readonly TYPE: ResourceTypeLock;
    protected readonly resources: ResourceAdapter;
    constructor(adapter: ResourceAdapter);
    abstract relationship(id: string | ResourceId | null): ResourceRel;
    abstract type(): ResourceTypeLock;
    update(resource: ResourceUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
}
declare abstract class ApiResource<R extends Resource> extends ApiResourceBase<R> {
    retrieve(id: string | ResourceId, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
    list(params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<R>>;
    count(filter?: QueryFilter | QueryParamsList, options?: ResourcesConfig): Promise<number>;
}
declare abstract class ApiSingleton<R extends Resource> extends ApiResourceBase<R> {
    retrieve(params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<R>;
}
export default ResourceAdapter;
export { ApiResource, ApiSingleton };
export type { ResourcesConfig, ResourcesInitConfig };
