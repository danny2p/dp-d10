import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { ExternalPayment } from './external_payments';
type ExternalGatewayType = 'external_gateways';
type ExternalGatewayRel = ResourceRel & {
    type: ExternalGatewayType;
};
interface ExternalGateway extends Resource {
    readonly type: ExternalGatewayType;
    name: string;
    shared_secret: string;
    authorize_url?: string | null;
    capture_url?: string | null;
    void_url?: string | null;
    refund_url?: string | null;
    token_url?: string | null;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    external_payments?: ExternalPayment[] | null;
}
interface ExternalGatewayCreate extends ResourceCreate {
    name: string;
    authorize_url?: string | null;
    capture_url?: string | null;
    void_url?: string | null;
    refund_url?: string | null;
    token_url?: string | null;
}
interface ExternalGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    authorize_url?: string | null;
    capture_url?: string | null;
    void_url?: string | null;
    refund_url?: string | null;
    token_url?: string | null;
}
declare class ExternalGateways extends ApiResource<ExternalGateway> {
    static readonly TYPE: ExternalGatewayType;
    create(resource: ExternalGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ExternalGateway>;
    update(resource: ExternalGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ExternalGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(externalGatewayId: string | ExternalGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(externalGatewayId: string | ExternalGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    external_payments(externalGatewayId: string | ExternalGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<ExternalPayment>>;
    isExternalGateway(resource: any): resource is ExternalGateway;
    relationship(id: string | ResourceId | null): ExternalGatewayRel;
    type(): ExternalGatewayType;
}
export default ExternalGateways;
export type { ExternalGateway, ExternalGatewayCreate, ExternalGatewayUpdate, ExternalGatewayType };
