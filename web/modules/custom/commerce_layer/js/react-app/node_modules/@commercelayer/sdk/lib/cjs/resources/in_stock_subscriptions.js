"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class InStockSubscriptions extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: InStockSubscriptions.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: InStockSubscriptions.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: InStockSubscriptions.TYPE } : id, options);
    }
    async market(inStockSubscriptionId, params, options) {
        const _inStockSubscriptionId = inStockSubscriptionId.id || inStockSubscriptionId;
        return this.resources.fetch({ type: 'markets' }, `in_stock_subscriptions/${_inStockSubscriptionId}/market`, params, options);
    }
    async customer(inStockSubscriptionId, params, options) {
        const _inStockSubscriptionId = inStockSubscriptionId.id || inStockSubscriptionId;
        return this.resources.fetch({ type: 'customers' }, `in_stock_subscriptions/${_inStockSubscriptionId}/customer`, params, options);
    }
    async sku(inStockSubscriptionId, params, options) {
        const _inStockSubscriptionId = inStockSubscriptionId.id || inStockSubscriptionId;
        return this.resources.fetch({ type: 'skus' }, `in_stock_subscriptions/${_inStockSubscriptionId}/sku`, params, options);
    }
    async events(inStockSubscriptionId, params, options) {
        const _inStockSubscriptionId = inStockSubscriptionId.id || inStockSubscriptionId;
        return this.resources.fetch({ type: 'events' }, `in_stock_subscriptions/${_inStockSubscriptionId}/events`, params, options);
    }
    async versions(inStockSubscriptionId, params, options) {
        const _inStockSubscriptionId = inStockSubscriptionId.id || inStockSubscriptionId;
        return this.resources.fetch({ type: 'versions' }, `in_stock_subscriptions/${_inStockSubscriptionId}/versions`, params, options);
    }
    async _activate(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: InStockSubscriptions.TYPE, _activate: true }, params, options);
    }
    async _deactivate(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: InStockSubscriptions.TYPE, _deactivate: true }, params, options);
    }
    isInStockSubscription(resource) {
        return resource.type && (resource.type === InStockSubscriptions.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: InStockSubscriptions.TYPE } : { id: id.id, type: InStockSubscriptions.TYPE };
    }
    type() {
        return InStockSubscriptions.TYPE;
    }
}
InStockSubscriptions.TYPE = 'in_stock_subscriptions';
exports.default = InStockSubscriptions;
