import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Event } from './events';
type ExportType = 'exports';
type ExportRel = ResourceRel & {
    type: ExportType;
};
interface Export extends Resource {
    readonly type: ExportType;
    resource_type: string;
    format?: string | null;
    status: 'pending' | 'in_progress' | 'completed';
    includes?: string[] | null;
    filters?: Record<string, any> | null;
    dry_data?: boolean | null;
    started_at?: string | null;
    completed_at?: string | null;
    interrupted_at?: string | null;
    records_count?: number | null;
    attachment_url?: string | null;
    events?: Event[] | null;
}
interface ExportCreate extends ResourceCreate {
    resource_type: string;
    format?: string | null;
    includes?: string[] | null;
    filters?: Record<string, any> | null;
    dry_data?: boolean | null;
}
declare class Exports extends ApiResource<Export> {
    static readonly TYPE: ExportType;
    create(resource: ExportCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Export>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    events(exportId: string | Export, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    isExport(resource: any): resource is Export;
    relationship(id: string | ResourceId | null): ExportRel;
    type(): ExportType;
}
export default Exports;
export type { Export, ExportCreate, ExportType };
