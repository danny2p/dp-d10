import { ApiResource } from '../resource';
class Skus extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Skus.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Skus.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Skus.TYPE } : id, options);
    }
    async shipping_category(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'shipping_categories' }, `skus/${_skuId}/shipping_category`, params, options);
    }
    async prices(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'prices' }, `skus/${_skuId}/prices`, params, options);
    }
    async stock_items(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'stock_items' }, `skus/${_skuId}/stock_items`, params, options);
    }
    async stock_reservations(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'stock_reservations' }, `skus/${_skuId}/stock_reservations`, params, options);
    }
    async delivery_lead_times(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'delivery_lead_times' }, `skus/${_skuId}/delivery_lead_times`, params, options);
    }
    async sku_options(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'sku_options' }, `skus/${_skuId}/sku_options`, params, options);
    }
    async attachments(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'attachments' }, `skus/${_skuId}/attachments`, params, options);
    }
    async events(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'events' }, `skus/${_skuId}/events`, params, options);
    }
    async tags(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'tags' }, `skus/${_skuId}/tags`, params, options);
    }
    async versions(skuId, params, options) {
        const _skuId = skuId.id || skuId;
        return this.resources.fetch({ type: 'versions' }, `skus/${_skuId}/versions`, params, options);
    }
    isSku(resource) {
        return resource.type && (resource.type === Skus.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Skus.TYPE } : { id: id.id, type: Skus.TYPE };
    }
    type() {
        return Skus.TYPE;
    }
}
Skus.TYPE = 'skus';
export default Skus;
