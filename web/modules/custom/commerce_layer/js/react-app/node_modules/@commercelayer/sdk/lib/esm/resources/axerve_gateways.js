import { ApiResource } from '../resource';
class AxerveGateways extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: AxerveGateways.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: AxerveGateways.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: AxerveGateways.TYPE } : id, options);
    }
    async payment_methods(axerveGatewayId, params, options) {
        const _axerveGatewayId = axerveGatewayId.id || axerveGatewayId;
        return this.resources.fetch({ type: 'payment_methods' }, `axerve_gateways/${_axerveGatewayId}/payment_methods`, params, options);
    }
    async versions(axerveGatewayId, params, options) {
        const _axerveGatewayId = axerveGatewayId.id || axerveGatewayId;
        return this.resources.fetch({ type: 'versions' }, `axerve_gateways/${_axerveGatewayId}/versions`, params, options);
    }
    async axerve_payments(axerveGatewayId, params, options) {
        const _axerveGatewayId = axerveGatewayId.id || axerveGatewayId;
        return this.resources.fetch({ type: 'axerve_payments' }, `axerve_gateways/${_axerveGatewayId}/axerve_payments`, params, options);
    }
    isAxerveGateway(resource) {
        return resource.type && (resource.type === AxerveGateways.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: AxerveGateways.TYPE } : { id: id.id, type: AxerveGateways.TYPE };
    }
    type() {
        return AxerveGateways.TYPE;
    }
}
AxerveGateways.TYPE = 'axerve_gateways';
export default AxerveGateways;
