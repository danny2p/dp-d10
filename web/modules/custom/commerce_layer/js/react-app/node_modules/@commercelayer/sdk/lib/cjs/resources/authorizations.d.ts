import { ApiResource } from '../resource';
import type { Resource, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order } from './orders';
import type { Attachment } from './attachments';
import type { Version } from './versions';
import type { Capture } from './captures';
import type { Void } from './voids';
import type { Event } from './events';
type AuthorizationType = 'authorizations';
type AuthorizationRel = ResourceRel & {
    type: AuthorizationType;
};
interface Authorization extends Resource {
    readonly type: AuthorizationType;
    number: string;
    currency_code: string;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    succeeded: boolean;
    message?: string | null;
    error_code?: string | null;
    error_detail?: string | null;
    token?: string | null;
    gateway_transaction_id?: string | null;
    cvv_code?: string | null;
    cvv_message?: string | null;
    avs_code?: string | null;
    avs_message?: string | null;
    fraud_review?: string | null;
    capture_amount_cents?: number | null;
    capture_amount_float?: number | null;
    formatted_capture_amount?: string | null;
    capture_balance_cents?: number | null;
    capture_balance_float?: number | null;
    formatted_capture_balance?: string | null;
    void_balance_cents?: number | null;
    void_balance_float?: number | null;
    formatted_void_balance?: string | null;
    order?: Order | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
    captures?: Capture[] | null;
    voids?: Void[] | null;
    events?: Event[] | null;
}
interface AuthorizationUpdate extends ResourceUpdate {
    _capture?: boolean | null;
    _capture_amount_cents?: number | null;
    _void?: boolean | null;
}
declare class Authorizations extends ApiResource<Authorization> {
    static readonly TYPE: AuthorizationType;
    update(resource: AuthorizationUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Authorization>;
    order(authorizationId: string | Authorization, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    attachments(authorizationId: string | Authorization, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(authorizationId: string | Authorization, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    captures(authorizationId: string | Authorization, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Capture>>;
    voids(authorizationId: string | Authorization, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Void>>;
    events(authorizationId: string | Authorization, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    _capture(id: string | Authorization, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Authorization>;
    _capture_amount_cents(id: string | Authorization, triggerValue: number, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Authorization>;
    _void(id: string | Authorization, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Authorization>;
    isAuthorization(resource: any): resource is Authorization;
    relationship(id: string | ResourceId | null): AuthorizationRel;
    type(): AuthorizationType;
}
export default Authorizations;
export type { Authorization, AuthorizationUpdate, AuthorizationType };
