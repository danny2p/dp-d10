import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Customer } from './customers';
import type { Market } from './markets';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type CustomerGroupType = 'customer_groups';
type CustomerGroupRel = ResourceRel & {
    type: CustomerGroupType;
};
interface CustomerGroup extends Resource {
    readonly type: CustomerGroupType;
    name: string;
    customers?: Customer[] | null;
    markets?: Market[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface CustomerGroupCreate extends ResourceCreate {
    name: string;
}
interface CustomerGroupUpdate extends ResourceUpdate {
    name?: string | null;
}
declare class CustomerGroups extends ApiResource<CustomerGroup> {
    static readonly TYPE: CustomerGroupType;
    create(resource: CustomerGroupCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerGroup>;
    update(resource: CustomerGroupUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerGroup>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    customers(customerGroupId: string | CustomerGroup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Customer>>;
    markets(customerGroupId: string | CustomerGroup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Market>>;
    attachments(customerGroupId: string | CustomerGroup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(customerGroupId: string | CustomerGroup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isCustomerGroup(resource: any): resource is CustomerGroup;
    relationship(id: string | ResourceId | null): CustomerGroupRel;
    type(): CustomerGroupType;
}
export default CustomerGroups;
export type { CustomerGroup, CustomerGroupCreate, CustomerGroupUpdate, CustomerGroupType };
