import { ApiResource } from '../resource';
class FixedPricePromotions extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: FixedPricePromotions.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: FixedPricePromotions.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: FixedPricePromotions.TYPE } : id, options);
    }
    async market(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'markets' }, `fixed_price_promotions/${_fixedPricePromotionId}/market`, params, options);
    }
    async order_amount_promotion_rule(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'order_amount_promotion_rules' }, `fixed_price_promotions/${_fixedPricePromotionId}/order_amount_promotion_rule`, params, options);
    }
    async sku_list_promotion_rule(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'sku_list_promotion_rules' }, `fixed_price_promotions/${_fixedPricePromotionId}/sku_list_promotion_rule`, params, options);
    }
    async coupon_codes_promotion_rule(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'coupon_codes_promotion_rules' }, `fixed_price_promotions/${_fixedPricePromotionId}/coupon_codes_promotion_rule`, params, options);
    }
    async coupons(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'coupons' }, `fixed_price_promotions/${_fixedPricePromotionId}/coupons`, params, options);
    }
    async sku_list(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'sku_lists' }, `fixed_price_promotions/${_fixedPricePromotionId}/sku_list`, params, options);
    }
    async attachments(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'attachments' }, `fixed_price_promotions/${_fixedPricePromotionId}/attachments`, params, options);
    }
    async events(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'events' }, `fixed_price_promotions/${_fixedPricePromotionId}/events`, params, options);
    }
    async tags(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'tags' }, `fixed_price_promotions/${_fixedPricePromotionId}/tags`, params, options);
    }
    async versions(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'versions' }, `fixed_price_promotions/${_fixedPricePromotionId}/versions`, params, options);
    }
    async skus(fixedPricePromotionId, params, options) {
        const _fixedPricePromotionId = fixedPricePromotionId.id || fixedPricePromotionId;
        return this.resources.fetch({ type: 'skus' }, `fixed_price_promotions/${_fixedPricePromotionId}/skus`, params, options);
    }
    async _disable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: FixedPricePromotions.TYPE, _disable: true }, params, options);
    }
    async _enable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: FixedPricePromotions.TYPE, _enable: true }, params, options);
    }
    isFixedPricePromotion(resource) {
        return resource.type && (resource.type === FixedPricePromotions.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: FixedPricePromotions.TYPE } : { id: id.id, type: FixedPricePromotions.TYPE };
    }
    type() {
        return FixedPricePromotions.TYPE;
    }
}
FixedPricePromotions.TYPE = 'fixed_price_promotions';
export default FixedPricePromotions;
