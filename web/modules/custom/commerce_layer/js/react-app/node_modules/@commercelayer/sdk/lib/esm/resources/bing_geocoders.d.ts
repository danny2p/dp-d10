import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Address } from './addresses';
import type { Attachment } from './attachments';
type BingGeocoderType = 'bing_geocoders';
type BingGeocoderRel = ResourceRel & {
    type: BingGeocoderType;
};
interface BingGeocoder extends Resource {
    readonly type: BingGeocoderType;
    name: string;
    addresses?: Address[] | null;
    attachments?: Attachment[] | null;
}
interface BingGeocoderCreate extends ResourceCreate {
    name: string;
    key: string;
}
interface BingGeocoderUpdate extends ResourceUpdate {
    name?: string | null;
    key?: string | null;
}
declare class BingGeocoders extends ApiResource<BingGeocoder> {
    static readonly TYPE: BingGeocoderType;
    create(resource: BingGeocoderCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BingGeocoder>;
    update(resource: BingGeocoderUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BingGeocoder>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    addresses(bingGeocoderId: string | BingGeocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Address>>;
    attachments(bingGeocoderId: string | BingGeocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    isBingGeocoder(resource: any): resource is BingGeocoder;
    relationship(id: string | ResourceId | null): BingGeocoderRel;
    type(): BingGeocoderType;
}
export default BingGeocoders;
export type { BingGeocoder, BingGeocoderCreate, BingGeocoderUpdate, BingGeocoderType };
