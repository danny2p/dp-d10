import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { StockLocation, StockLocationType } from './stock_locations';
import type { Parcel } from './parcels';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type PackageType = 'packages';
type PackageRel = ResourceRel & {
    type: PackageType;
};
type StockLocationRel = ResourceRel & {
    type: StockLocationType;
};
interface Package extends Resource {
    readonly type: PackageType;
    name: string;
    code?: string | null;
    length: number;
    width: number;
    height: number;
    unit_of_length: string;
    stock_location?: StockLocation | null;
    parcels?: Parcel[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface PackageCreate extends ResourceCreate {
    name: string;
    code?: string | null;
    length: number;
    width: number;
    height: number;
    unit_of_length: string;
    stock_location: StockLocationRel;
}
interface PackageUpdate extends ResourceUpdate {
    name?: string | null;
    code?: string | null;
    length?: number | null;
    width?: number | null;
    height?: number | null;
    unit_of_length?: string | null;
    stock_location?: StockLocationRel | null;
}
declare class Packages extends ApiResource<Package> {
    static readonly TYPE: PackageType;
    create(resource: PackageCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Package>;
    update(resource: PackageUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Package>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    stock_location(packageId: string | Package, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockLocation>;
    parcels(packageId: string | Package, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Parcel>>;
    attachments(packageId: string | Package, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(packageId: string | Package, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isPackage(resource: any): resource is Package;
    relationship(id: string | ResourceId | null): PackageRel;
    type(): PackageType;
}
export default Packages;
export type { Package, PackageCreate, PackageUpdate, PackageType };
