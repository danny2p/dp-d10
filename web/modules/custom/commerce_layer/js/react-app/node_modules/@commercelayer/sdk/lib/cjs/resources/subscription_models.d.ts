import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Market } from './markets';
import type { OrderSubscription } from './order_subscriptions';
import type { Attachment } from './attachments';
type SubscriptionModelType = 'subscription_models';
type SubscriptionModelRel = ResourceRel & {
    type: SubscriptionModelType;
};
interface SubscriptionModel extends Resource {
    readonly type: SubscriptionModelType;
    name: string;
    strategy?: string | null;
    frequencies: string[];
    auto_activate?: boolean | null;
    auto_cancel?: boolean | null;
    markets?: Market[] | null;
    order_subscriptions?: OrderSubscription[] | null;
    attachments?: Attachment[] | null;
}
interface SubscriptionModelCreate extends ResourceCreate {
    name: string;
    strategy?: string | null;
    frequencies: string[];
    auto_activate?: boolean | null;
    auto_cancel?: boolean | null;
}
interface SubscriptionModelUpdate extends ResourceUpdate {
    name?: string | null;
    strategy?: string | null;
    frequencies?: string[] | null;
    auto_activate?: boolean | null;
    auto_cancel?: boolean | null;
}
declare class SubscriptionModels extends ApiResource<SubscriptionModel> {
    static readonly TYPE: SubscriptionModelType;
    create(resource: SubscriptionModelCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SubscriptionModel>;
    update(resource: SubscriptionModelUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SubscriptionModel>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    markets(subscriptionModelId: string | SubscriptionModel, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Market>>;
    order_subscriptions(subscriptionModelId: string | SubscriptionModel, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<OrderSubscription>>;
    attachments(subscriptionModelId: string | SubscriptionModel, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    isSubscriptionModel(resource: any): resource is SubscriptionModel;
    relationship(id: string | ResourceId | null): SubscriptionModelRel;
    type(): SubscriptionModelType;
}
export default SubscriptionModels;
export type { SubscriptionModel, SubscriptionModelCreate, SubscriptionModelUpdate, SubscriptionModelType };
