"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ResourceAdapter_client, _ResourceAdapter_config;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiSingleton = exports.ApiResource = void 0;
const client_1 = __importDefault(require("./client"));
const jsonapi_1 = require("./jsonapi");
const query_1 = require("./query");
const config_1 = __importDefault(require("./config"));
const debug_1 = __importDefault(require("./debug"));
const debug = (0, debug_1.default)('resource');
class ListResponse extends Array {
    constructor(meta, data) {
        super(...(data || []));
        this.meta = meta;
    }
    first() { return this.length ? this[0] : undefined; }
    last() { return this.length ? this[this.length - 1] : undefined; }
    get(index) { return (this.length && (index >= 0)) ? this[index] : undefined; }
    hasNextPage() { return (this.meta.currentPage < this.meta.pageCount); }
    hasPrevPage() { return (this.meta.currentPage > 1); }
    getRecordCount() { return this.meta.recordCount; }
    getPageCount() { return this.meta.pageCount; }
    get recordCount() { return this.meta.recordCount; }
    get pageCount() { return this.meta.pageCount; }
}
class ResourceAdapter {
    constructor(config) {
        _ResourceAdapter_client.set(this, void 0);
        _ResourceAdapter_config.set(this, {});
        __classPrivateFieldSet(this, _ResourceAdapter_client, client_1.default.create(config), "f");
        this.localConfig(config);
    }
    get interceptors() { return __classPrivateFieldGet(this, _ResourceAdapter_client, "f").interceptors; }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    localConfig(config) {
        // if (typeof config.xyz !== 'undefined') this.#config.xyz = config.xyz
    }
    config(config) {
        debug('config %o', config);
        // ResourceAdapter config
        this.localConfig(config);
        // Client config
        __classPrivateFieldGet(this, _ResourceAdapter_client, "f").config(config);
        return this;
    }
    /*
    get clientInstance(): ApiClient {
        return this.#client
    }
    */
    async singleton(resource, params, options) {
        debug('singleton: %o, %O, %O', resource, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('get', `${resource.type}`, undefined, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        return r;
    }
    async retrieve(resource, params, options) {
        debug('retrieve: %o, %O, %O', resource, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('get', `${resource.type}/${resource.id}`, undefined, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        return r;
    }
    async list(resource, params, options) {
        var _a, _b;
        debug('list: %o, %O, %O', resource, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('get', `${resource.type}`, undefined, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        const meta = {
            pageCount: Number((_a = res.meta) === null || _a === void 0 ? void 0 : _a.page_count),
            recordCount: Number((_b = res.meta) === null || _b === void 0 ? void 0 : _b.record_count),
            currentPage: (params === null || params === void 0 ? void 0 : params.pageNumber) || config_1.default.default.pageNumber,
            recordsPerPage: (params === null || params === void 0 ? void 0 : params.pageSize) || config_1.default.default.pageSize
        };
        return new ListResponse(meta, r);
    }
    async create(resource, params, options) {
        debug('create: %o, %O, %O', resource, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const data = (0, jsonapi_1.normalize)(resource);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('post', resource.type, data, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        return r;
    }
    async update(resource, params, options) {
        debug('update: %o, %O, %O', resource, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const data = (0, jsonapi_1.normalize)(resource);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('patch', `${resource.type}/${resource.id}`, data, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        return r;
    }
    async delete(resource, options) {
        debug('delete: %o, %O', resource, options || {});
        await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('delete', `${resource.type}/${resource.id}`, undefined, options);
    }
    async fetch(resource, path, params, options) {
        var _a, _b;
        debug('fetch: %o, %O, %O', path, params || {}, options || {});
        const queryParams = (0, query_1.generateQueryStringParams)(params, resource);
        if (options === null || options === void 0 ? void 0 : options.params)
            Object.assign(queryParams, options === null || options === void 0 ? void 0 : options.params);
        const res = await __classPrivateFieldGet(this, _ResourceAdapter_client, "f").request('get', path, undefined, { ...options, params: queryParams });
        const r = (0, jsonapi_1.denormalize)(res);
        if (Array.isArray(r)) {
            const p = params;
            const meta = {
                pageCount: Number((_a = res.meta) === null || _a === void 0 ? void 0 : _a.page_count),
                recordCount: Number((_b = res.meta) === null || _b === void 0 ? void 0 : _b.record_count),
                currentPage: (p === null || p === void 0 ? void 0 : p.pageNumber) || config_1.default.default.pageNumber,
                recordsPerPage: (p === null || p === void 0 ? void 0 : p.pageSize) || config_1.default.default.pageSize
            };
            return new ListResponse(meta, r);
        }
        else
            return r;
    }
}
_ResourceAdapter_client = new WeakMap(), _ResourceAdapter_config = new WeakMap();
class ApiResourceBase {
    constructor(adapter) {
        debug('new resource instance: %s', this.type());
        this.resources = adapter;
    }
    // reference, reference_origin and metadata attributes are always updatable
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: this.type() }, params, options);
    }
}
class ApiResource extends ApiResourceBase {
    async retrieve(id, params, options) {
        return this.resources.retrieve((typeof id === 'string') ? { type: this.type(), id } : id, params, options);
    }
    async list(params, options) {
        return this.resources.list({ type: this.type() }, params, options);
    }
    async count(filter, options) {
        const params = { filters: (0, query_1.isParamsList)(filter) ? filter.filters : filter, pageNumber: 1, pageSize: 1 };
        const response = await this.list(params, options);
        return Promise.resolve(response.meta.recordCount);
    }
}
exports.ApiResource = ApiResource;
class ApiSingleton extends ApiResourceBase {
    async retrieve(params, options) {
        return this.resources.singleton({ type: this.type() }, params, options);
    }
}
exports.ApiSingleton = ApiSingleton;
exports.default = ResourceAdapter;
