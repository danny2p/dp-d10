import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { CustomerPaymentSource } from './customer_payment_sources';
import type { Version } from './versions';
type ExternalPaymentType = 'external_payments';
type ExternalPaymentRel = ResourceRel & {
    type: ExternalPaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface ExternalPayment extends Resource {
    readonly type: ExternalPaymentType;
    payment_source_token: string;
    options?: Record<string, any> | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    wallet?: CustomerPaymentSource | null;
    versions?: Version[] | null;
}
interface ExternalPaymentCreate extends ResourceCreate {
    payment_source_token: string;
    options?: Record<string, any> | null;
    order: OrderRel;
}
interface ExternalPaymentUpdate extends ResourceUpdate {
    options?: Record<string, any> | null;
    order?: OrderRel | null;
}
declare class ExternalPayments extends ApiResource<ExternalPayment> {
    static readonly TYPE: ExternalPaymentType;
    create(resource: ExternalPaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ExternalPayment>;
    update(resource: ExternalPaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ExternalPayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(externalPaymentId: string | ExternalPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(externalPaymentId: string | ExternalPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    wallet(externalPaymentId: string | ExternalPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerPaymentSource>;
    versions(externalPaymentId: string | ExternalPayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isExternalPayment(resource: any): resource is ExternalPayment;
    relationship(id: string | ResourceId | null): ExternalPaymentRel;
    type(): ExternalPaymentType;
}
export default ExternalPayments;
export type { ExternalPayment, ExternalPaymentCreate, ExternalPaymentUpdate, ExternalPaymentType };
