import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Customer, CustomerType } from './customers';
import type { Address, AddressType } from './addresses';
import type { Event } from './events';
import type { Version } from './versions';
type CustomerAddressType = 'customer_addresses';
type CustomerAddressRel = ResourceRel & {
    type: CustomerAddressType;
};
type CustomerRel = ResourceRel & {
    type: CustomerType;
};
type AddressRel = ResourceRel & {
    type: AddressType;
};
interface CustomerAddress extends Resource {
    readonly type: CustomerAddressType;
    name?: string | null;
    customer_email: string;
    customer?: Customer | null;
    address?: Address | null;
    events?: Event[] | null;
    versions?: Version[] | null;
}
interface CustomerAddressCreate extends ResourceCreate {
    customer_email: string;
    customer: CustomerRel;
    address: AddressRel;
}
interface CustomerAddressUpdate extends ResourceUpdate {
    customer?: CustomerRel | null;
    address?: AddressRel | null;
}
declare class CustomerAddresses extends ApiResource<CustomerAddress> {
    static readonly TYPE: CustomerAddressType;
    create(resource: CustomerAddressCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerAddress>;
    update(resource: CustomerAddressUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerAddress>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    customer(customerAddressId: string | CustomerAddress, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    address(customerAddressId: string | CustomerAddress, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Address>;
    events(customerAddressId: string | CustomerAddress, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    versions(customerAddressId: string | CustomerAddress, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isCustomerAddress(resource: any): resource is CustomerAddress;
    relationship(id: string | ResourceId | null): CustomerAddressRel;
    type(): CustomerAddressType;
}
export default CustomerAddresses;
export type { CustomerAddress, CustomerAddressCreate, CustomerAddressUpdate, CustomerAddressType };
