"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Shipments extends resource_1.ApiResource {
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Shipments.TYPE }, params, options);
    }
    async order(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'orders' }, `shipments/${_shipmentId}/order`, params, options);
    }
    async shipping_category(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'shipping_categories' }, `shipments/${_shipmentId}/shipping_category`, params, options);
    }
    async stock_location(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'stock_locations' }, `shipments/${_shipmentId}/stock_location`, params, options);
    }
    async origin_address(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'addresses' }, `shipments/${_shipmentId}/origin_address`, params, options);
    }
    async shipping_address(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'addresses' }, `shipments/${_shipmentId}/shipping_address`, params, options);
    }
    async shipping_method(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'shipping_methods' }, `shipments/${_shipmentId}/shipping_method`, params, options);
    }
    async delivery_lead_time(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'delivery_lead_times' }, `shipments/${_shipmentId}/delivery_lead_time`, params, options);
    }
    async stock_line_items(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'stock_line_items' }, `shipments/${_shipmentId}/stock_line_items`, params, options);
    }
    async stock_transfers(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'stock_transfers' }, `shipments/${_shipmentId}/stock_transfers`, params, options);
    }
    async available_shipping_methods(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'shipping_methods' }, `shipments/${_shipmentId}/available_shipping_methods`, params, options);
    }
    async carrier_accounts(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'carrier_accounts' }, `shipments/${_shipmentId}/carrier_accounts`, params, options);
    }
    async parcels(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'parcels' }, `shipments/${_shipmentId}/parcels`, params, options);
    }
    async attachments(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'attachments' }, `shipments/${_shipmentId}/attachments`, params, options);
    }
    async events(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'events' }, `shipments/${_shipmentId}/events`, params, options);
    }
    async versions(shipmentId, params, options) {
        const _shipmentId = shipmentId.id || shipmentId;
        return this.resources.fetch({ type: 'versions' }, `shipments/${_shipmentId}/versions`, params, options);
    }
    async _on_hold(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _on_hold: true }, params, options);
    }
    async _picking(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _picking: true }, params, options);
    }
    async _packing(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _packing: true }, params, options);
    }
    async _ready_to_ship(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _ready_to_ship: true }, params, options);
    }
    async _ship(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _ship: true }, params, options);
    }
    async _get_rates(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _get_rates: true }, params, options);
    }
    async _purchase(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Shipments.TYPE, _purchase: true }, params, options);
    }
    isShipment(resource) {
        return resource.type && (resource.type === Shipments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Shipments.TYPE } : { id: id.id, type: Shipments.TYPE };
    }
    type() {
        return Shipments.TYPE;
    }
}
Shipments.TYPE = 'shipments';
exports.default = Shipments;
