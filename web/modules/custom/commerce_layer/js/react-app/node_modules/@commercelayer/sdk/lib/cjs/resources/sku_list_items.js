"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class SkuListItems extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: SkuListItems.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: SkuListItems.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: SkuListItems.TYPE } : id, options);
    }
    async sku_list(skuListItemId, params, options) {
        const _skuListItemId = skuListItemId.id || skuListItemId;
        return this.resources.fetch({ type: 'sku_lists' }, `sku_list_items/${_skuListItemId}/sku_list`, params, options);
    }
    async sku(skuListItemId, params, options) {
        const _skuListItemId = skuListItemId.id || skuListItemId;
        return this.resources.fetch({ type: 'skus' }, `sku_list_items/${_skuListItemId}/sku`, params, options);
    }
    async versions(skuListItemId, params, options) {
        const _skuListItemId = skuListItemId.id || skuListItemId;
        return this.resources.fetch({ type: 'versions' }, `sku_list_items/${_skuListItemId}/versions`, params, options);
    }
    isSkuListItem(resource) {
        return resource.type && (resource.type === SkuListItems.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: SkuListItems.TYPE } : { id: id.id, type: SkuListItems.TYPE };
    }
    type() {
        return SkuListItems.TYPE;
    }
}
SkuListItems.TYPE = 'sku_list_items';
exports.default = SkuListItems;
