import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { Version } from './versions';
type BraintreePaymentType = 'braintree_payments';
type BraintreePaymentRel = ResourceRel & {
    type: BraintreePaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface BraintreePayment extends Resource {
    readonly type: BraintreePaymentType;
    client_token: string;
    payment_method_nonce?: string | null;
    payment_id?: string | null;
    local?: boolean | null;
    options?: Record<string, any> | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    versions?: Version[] | null;
}
interface BraintreePaymentCreate extends ResourceCreate {
    payment_id?: string | null;
    local?: boolean | null;
    options?: Record<string, any> | null;
    order: OrderRel;
}
interface BraintreePaymentUpdate extends ResourceUpdate {
    payment_method_nonce?: string | null;
    payment_id?: string | null;
    local?: boolean | null;
    options?: Record<string, any> | null;
    order?: OrderRel | null;
}
declare class BraintreePayments extends ApiResource<BraintreePayment> {
    static readonly TYPE: BraintreePaymentType;
    create(resource: BraintreePaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BraintreePayment>;
    update(resource: BraintreePaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BraintreePayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(braintreePaymentId: string | BraintreePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(braintreePaymentId: string | BraintreePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    versions(braintreePaymentId: string | BraintreePayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isBraintreePayment(resource: any): resource is BraintreePayment;
    relationship(id: string | ResourceId | null): BraintreePaymentRel;
    type(): BraintreePaymentType;
}
export default BraintreePayments;
export type { BraintreePayment, BraintreePaymentCreate, BraintreePaymentUpdate, BraintreePaymentType };
