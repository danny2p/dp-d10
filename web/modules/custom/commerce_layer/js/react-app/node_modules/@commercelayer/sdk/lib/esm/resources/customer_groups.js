import { ApiResource } from '../resource';
class CustomerGroups extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CustomerGroups.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CustomerGroups.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CustomerGroups.TYPE } : id, options);
    }
    async customers(customerGroupId, params, options) {
        const _customerGroupId = customerGroupId.id || customerGroupId;
        return this.resources.fetch({ type: 'customers' }, `customer_groups/${_customerGroupId}/customers`, params, options);
    }
    async markets(customerGroupId, params, options) {
        const _customerGroupId = customerGroupId.id || customerGroupId;
        return this.resources.fetch({ type: 'markets' }, `customer_groups/${_customerGroupId}/markets`, params, options);
    }
    async attachments(customerGroupId, params, options) {
        const _customerGroupId = customerGroupId.id || customerGroupId;
        return this.resources.fetch({ type: 'attachments' }, `customer_groups/${_customerGroupId}/attachments`, params, options);
    }
    async versions(customerGroupId, params, options) {
        const _customerGroupId = customerGroupId.id || customerGroupId;
        return this.resources.fetch({ type: 'versions' }, `customer_groups/${_customerGroupId}/versions`, params, options);
    }
    isCustomerGroup(resource) {
        return resource.type && (resource.type === CustomerGroups.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CustomerGroups.TYPE } : { id: id.id, type: CustomerGroups.TYPE };
    }
    type() {
        return CustomerGroups.TYPE;
    }
}
CustomerGroups.TYPE = 'customer_groups';
export default CustomerGroups;
