"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Markets extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Markets.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Markets.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Markets.TYPE } : id, options);
    }
    async merchant(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'merchants' }, `markets/${_marketId}/merchant`, params, options);
    }
    async price_list(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'price_lists' }, `markets/${_marketId}/price_list`, params, options);
    }
    async inventory_model(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'inventory_models' }, `markets/${_marketId}/inventory_model`, params, options);
    }
    async subscription_model(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'subscription_models' }, `markets/${_marketId}/subscription_model`, params, options);
    }
    async tax_calculator(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'tax_calculators' }, `markets/${_marketId}/tax_calculator`, params, options);
    }
    async customer_group(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'customer_groups' }, `markets/${_marketId}/customer_group`, params, options);
    }
    async attachments(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'attachments' }, `markets/${_marketId}/attachments`, params, options);
    }
    async versions(marketId, params, options) {
        const _marketId = marketId.id || marketId;
        return this.resources.fetch({ type: 'versions' }, `markets/${_marketId}/versions`, params, options);
    }
    async _disable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Markets.TYPE, _disable: true }, params, options);
    }
    async _enable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Markets.TYPE, _enable: true }, params, options);
    }
    isMarket(resource) {
        return resource.type && (resource.type === Markets.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Markets.TYPE } : { id: id.id, type: Markets.TYPE };
    }
    type() {
        return Markets.TYPE;
    }
}
Markets.TYPE = 'markets';
exports.default = Markets;
