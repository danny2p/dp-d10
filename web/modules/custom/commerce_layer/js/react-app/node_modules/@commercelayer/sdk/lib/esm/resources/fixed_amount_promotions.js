import { ApiResource } from '../resource';
class FixedAmountPromotions extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: FixedAmountPromotions.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: FixedAmountPromotions.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: FixedAmountPromotions.TYPE } : id, options);
    }
    async market(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'markets' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/market`, params, options);
    }
    async order_amount_promotion_rule(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'order_amount_promotion_rules' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/order_amount_promotion_rule`, params, options);
    }
    async sku_list_promotion_rule(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'sku_list_promotion_rules' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/sku_list_promotion_rule`, params, options);
    }
    async coupon_codes_promotion_rule(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'coupon_codes_promotion_rules' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/coupon_codes_promotion_rule`, params, options);
    }
    async coupons(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'coupons' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/coupons`, params, options);
    }
    async sku_list(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'sku_lists' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/sku_list`, params, options);
    }
    async attachments(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'attachments' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/attachments`, params, options);
    }
    async events(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'events' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/events`, params, options);
    }
    async tags(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'tags' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/tags`, params, options);
    }
    async versions(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'versions' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/versions`, params, options);
    }
    async skus(fixedAmountPromotionId, params, options) {
        const _fixedAmountPromotionId = fixedAmountPromotionId.id || fixedAmountPromotionId;
        return this.resources.fetch({ type: 'skus' }, `fixed_amount_promotions/${_fixedAmountPromotionId}/skus`, params, options);
    }
    async _disable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: FixedAmountPromotions.TYPE, _disable: true }, params, options);
    }
    async _enable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: FixedAmountPromotions.TYPE, _enable: true }, params, options);
    }
    isFixedAmountPromotion(resource) {
        return resource.type && (resource.type === FixedAmountPromotions.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: FixedAmountPromotions.TYPE } : { id: id.id, type: FixedAmountPromotions.TYPE };
    }
    type() {
        return FixedAmountPromotions.TYPE;
    }
}
FixedAmountPromotions.TYPE = 'fixed_amount_promotions';
export default FixedAmountPromotions;
