"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class CustomerSubscriptions extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CustomerSubscriptions.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CustomerSubscriptions.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CustomerSubscriptions.TYPE } : id, options);
    }
    async customer(customerSubscriptionId, params, options) {
        const _customerSubscriptionId = customerSubscriptionId.id || customerSubscriptionId;
        return this.resources.fetch({ type: 'customers' }, `customer_subscriptions/${_customerSubscriptionId}/customer`, params, options);
    }
    async events(customerSubscriptionId, params, options) {
        const _customerSubscriptionId = customerSubscriptionId.id || customerSubscriptionId;
        return this.resources.fetch({ type: 'events' }, `customer_subscriptions/${_customerSubscriptionId}/events`, params, options);
    }
    async versions(customerSubscriptionId, params, options) {
        const _customerSubscriptionId = customerSubscriptionId.id || customerSubscriptionId;
        return this.resources.fetch({ type: 'versions' }, `customer_subscriptions/${_customerSubscriptionId}/versions`, params, options);
    }
    isCustomerSubscription(resource) {
        return resource.type && (resource.type === CustomerSubscriptions.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CustomerSubscriptions.TYPE } : { id: id.id, type: CustomerSubscriptions.TYPE };
    }
    type() {
        return CustomerSubscriptions.TYPE;
    }
}
CustomerSubscriptions.TYPE = 'customer_subscriptions';
exports.default = CustomerSubscriptions;
