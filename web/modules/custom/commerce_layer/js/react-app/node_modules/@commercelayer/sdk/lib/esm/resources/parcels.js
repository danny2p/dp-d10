import { ApiResource } from '../resource';
class Parcels extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Parcels.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Parcels.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Parcels.TYPE } : id, options);
    }
    async shipment(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'shipments' }, `parcels/${_parcelId}/shipment`, params, options);
    }
    async package(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'packages' }, `parcels/${_parcelId}/package`, params, options);
    }
    async parcel_line_items(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'parcel_line_items' }, `parcels/${_parcelId}/parcel_line_items`, params, options);
    }
    async attachments(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'attachments' }, `parcels/${_parcelId}/attachments`, params, options);
    }
    async events(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'events' }, `parcels/${_parcelId}/events`, params, options);
    }
    async versions(parcelId, params, options) {
        const _parcelId = parcelId.id || parcelId;
        return this.resources.fetch({ type: 'versions' }, `parcels/${_parcelId}/versions`, params, options);
    }
    isParcel(resource) {
        return resource.type && (resource.type === Parcels.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Parcels.TYPE } : { id: id.id, type: Parcels.TYPE };
    }
    type() {
        return Parcels.TYPE;
    }
}
Parcels.TYPE = 'parcels';
export default Parcels;
