import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PriceList, PriceListType } from './price_lists';
import type { Sku, SkuType } from './skus';
import type { PriceTier, PriceTierType } from './price_tiers';
import type { PriceVolumeTier } from './price_volume_tiers';
import type { PriceFrequencyTier } from './price_frequency_tiers';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type PriceType = 'prices';
type PriceRel = ResourceRel & {
    type: PriceType;
};
type PriceListRel = ResourceRel & {
    type: PriceListType;
};
type SkuRel = ResourceRel & {
    type: SkuType;
};
type PriceTierRel = ResourceRel & {
    type: PriceTierType;
};
interface Price extends Resource {
    readonly type: PriceType;
    currency_code?: string | null;
    sku_code?: string | null;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    compare_at_amount_cents: number;
    compare_at_amount_float: number;
    formatted_compare_at_amount: string;
    price_list?: PriceList | null;
    sku?: Sku | null;
    price_tiers?: PriceTier[] | null;
    price_volume_tiers?: PriceVolumeTier[] | null;
    price_frequency_tiers?: PriceFrequencyTier[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface PriceCreate extends ResourceCreate {
    sku_code?: string | null;
    amount_cents: number;
    compare_at_amount_cents: number;
    price_list: PriceListRel;
    sku: SkuRel;
    price_tiers?: PriceTierRel[] | null;
}
interface PriceUpdate extends ResourceUpdate {
    sku_code?: string | null;
    amount_cents?: number | null;
    compare_at_amount_cents?: number | null;
    price_list?: PriceListRel | null;
    sku?: SkuRel | null;
    price_tiers?: PriceTierRel[] | null;
}
declare class Prices extends ApiResource<Price> {
    static readonly TYPE: PriceType;
    create(resource: PriceCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Price>;
    update(resource: PriceUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Price>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    price_list(priceId: string | Price, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PriceList>;
    sku(priceId: string | Price, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Sku>;
    price_tiers(priceId: string | Price, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PriceTier>>;
    price_volume_tiers(priceId: string | Price, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PriceVolumeTier>>;
    price_frequency_tiers(priceId: string | Price, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PriceFrequencyTier>>;
    attachments(priceId: string | Price, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(priceId: string | Price, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isPrice(resource: any): resource is Price;
    relationship(id: string | ResourceId | null): PriceRel;
    type(): PriceType;
}
export default Prices;
export type { Price, PriceCreate, PriceUpdate, PriceType };
