import type { ResourceType } from "./resource";
type QueryFilter = Record<string, string | number | boolean>;
interface QueryParamsRetrieve {
    include?: string[];
    fields?: string[] | Record<string, string[]>;
}
interface QueryParamsList extends QueryParamsRetrieve {
    sort?: string[] | Record<string, 'asc' | 'desc'>;
    filters?: QueryFilter;
    pageNumber?: number;
    pageSize?: number;
}
type QueryParams = QueryParamsRetrieve | QueryParamsList;
export type { QueryParamsRetrieve, QueryParamsList, QueryParams, QueryFilter };
declare const isParamsList: (params: any) => params is QueryParamsList;
declare const generateQueryStringParams: (params: QueryParamsRetrieve | QueryParamsList | undefined, res: string | ResourceType) => Record<string, string>;
export { generateQueryStringParams, isParamsList };
