"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class PaymentMethods extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: PaymentMethods.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: PaymentMethods.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: PaymentMethods.TYPE } : id, options);
    }
    async market(paymentMethodId, params, options) {
        const _paymentMethodId = paymentMethodId.id || paymentMethodId;
        return this.resources.fetch({ type: 'markets' }, `payment_methods/${_paymentMethodId}/market`, params, options);
    }
    async payment_gateway(paymentMethodId, params, options) {
        const _paymentMethodId = paymentMethodId.id || paymentMethodId;
        return this.resources.fetch({ type: 'payment_gateways' }, `payment_methods/${_paymentMethodId}/payment_gateway`, params, options);
    }
    async attachments(paymentMethodId, params, options) {
        const _paymentMethodId = paymentMethodId.id || paymentMethodId;
        return this.resources.fetch({ type: 'attachments' }, `payment_methods/${_paymentMethodId}/attachments`, params, options);
    }
    async versions(paymentMethodId, params, options) {
        const _paymentMethodId = paymentMethodId.id || paymentMethodId;
        return this.resources.fetch({ type: 'versions' }, `payment_methods/${_paymentMethodId}/versions`, params, options);
    }
    async _disable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: PaymentMethods.TYPE, _disable: true }, params, options);
    }
    async _enable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: PaymentMethods.TYPE, _enable: true }, params, options);
    }
    isPaymentMethod(resource) {
        return resource.type && (resource.type === PaymentMethods.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: PaymentMethods.TYPE } : { id: id.id, type: PaymentMethods.TYPE };
    }
    type() {
        return PaymentMethods.TYPE;
    }
}
PaymentMethods.TYPE = 'payment_methods';
exports.default = PaymentMethods;
