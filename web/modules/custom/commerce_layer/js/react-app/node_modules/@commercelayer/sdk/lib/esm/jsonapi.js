import { isResourceId, isResourceType } from './common';
import Debug from './debug';
const debug = Debug('jsonapi');
// DENORMALIZATION
const denormalize = (response) => {
    let denormalizedResponse;
    if (response.links)
        delete response.links;
    const data = response.data;
    const included = response.included;
    if (!data)
        denormalizedResponse = data;
    else {
        if (Array.isArray(data))
            denormalizedResponse = data.map(res => denormalizeResource(res, included));
        else
            denormalizedResponse = denormalizeResource(data, included);
    }
    return denormalizedResponse;
};
const findIncluded = (rel, included = []) => {
    const inc = included.find(inc => {
        return (rel.id === inc.id) && (rel.type === inc.type);
    });
    return inc || rel;
};
const denormalizeResource = (res, included) => {
    debug('denormalize resource: %O, %o', res, included || {});
    if (!res)
        return res;
    const resource = {
        id: res.id,
        type: res.type,
        ...res.attributes,
    };
    if (res.relationships)
        Object.keys(res.relationships).forEach(key => {
            const rel = res.relationships[key].data;
            if (rel) {
                if (Array.isArray(rel))
                    resource[key] = rel.map(r => denormalizeResource(findIncluded(r, included), included));
                else
                    resource[key] = denormalizeResource(findIncluded(rel, included), included);
            }
            else if (rel === null)
                resource[key] = null;
        });
    debug('denormalized resource: %O', resource);
    return resource;
};
// NORMALIZATION
const normalize = (resource) => {
    debug('normalize resource: %O', resource);
    const attributes = {};
    const relationships = {};
    for (const field in resource) {
        if (['type', 'id'].includes(field))
            continue;
        const value = resource[field];
        if (Array.isArray(value) && (value.length === 1) && isResourceType(value[0]) && (value[0].id === null)) {
            relationships[field] = { data: [] };
        }
        else if (value && isResourceType(value) && (value.id === null)) {
            relationships[field] = { data: null };
        }
        else if (value && (isResourceId(value) || (Array.isArray(value) && isResourceId(value[0])))) {
            relationships[field] = { data: value };
        }
        else
            attributes[field] = value;
    }
    const normalized = {
        type: resource.type,
        attributes,
        relationships
    };
    if (isResourceId(resource))
        normalized.id = resource.id;
    debug('normalized resource: %O', normalized);
    return normalized;
};
export { denormalize, normalize };
