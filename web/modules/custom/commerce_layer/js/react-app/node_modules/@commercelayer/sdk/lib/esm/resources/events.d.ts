import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsList } from '../query';
import type { EventCallback } from './event_callbacks';
import type { Webhook } from './webhooks';
type EventType = 'events';
type EventRel = ResourceRel & {
    type: EventType;
};
interface Event extends Resource {
    readonly type: EventType;
    name: string;
    last_event_callbacks?: EventCallback[] | null;
    webhooks?: Webhook[] | null;
}
declare class Events extends ApiResource<Event> {
    static readonly TYPE: EventType;
    last_event_callbacks(eventId: string | Event, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<EventCallback>>;
    webhooks(eventId: string | Event, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Webhook>>;
    isEvent(resource: any): resource is Event;
    relationship(id: string | ResourceId | null): EventRel;
    type(): EventType;
}
export default Events;
export type { Event, EventType };
