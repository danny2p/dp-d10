import { ApiResource } from '../resource';
class ExternalPayments extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ExternalPayments.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ExternalPayments.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ExternalPayments.TYPE } : id, options);
    }
    async order(externalPaymentId, params, options) {
        const _externalPaymentId = externalPaymentId.id || externalPaymentId;
        return this.resources.fetch({ type: 'orders' }, `external_payments/${_externalPaymentId}/order`, params, options);
    }
    async payment_gateway(externalPaymentId, params, options) {
        const _externalPaymentId = externalPaymentId.id || externalPaymentId;
        return this.resources.fetch({ type: 'payment_gateways' }, `external_payments/${_externalPaymentId}/payment_gateway`, params, options);
    }
    async wallet(externalPaymentId, params, options) {
        const _externalPaymentId = externalPaymentId.id || externalPaymentId;
        return this.resources.fetch({ type: 'customer_payment_sources' }, `external_payments/${_externalPaymentId}/wallet`, params, options);
    }
    async versions(externalPaymentId, params, options) {
        const _externalPaymentId = externalPaymentId.id || externalPaymentId;
        return this.resources.fetch({ type: 'versions' }, `external_payments/${_externalPaymentId}/versions`, params, options);
    }
    isExternalPayment(resource) {
        return resource.type && (resource.type === ExternalPayments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ExternalPayments.TYPE } : { id: id.id, type: ExternalPayments.TYPE };
    }
    type() {
        return ExternalPayments.TYPE;
    }
}
ExternalPayments.TYPE = 'external_payments';
export default ExternalPayments;
