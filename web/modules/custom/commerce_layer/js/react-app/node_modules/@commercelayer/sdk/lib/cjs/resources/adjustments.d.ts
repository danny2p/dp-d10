import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Version } from './versions';
type AdjustmentType = 'adjustments';
type AdjustmentRel = ResourceRel & {
    type: AdjustmentType;
};
interface Adjustment extends Resource {
    readonly type: AdjustmentType;
    name: string;
    currency_code: string;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    versions?: Version[] | null;
}
interface AdjustmentCreate extends ResourceCreate {
    name: string;
    currency_code: string;
    amount_cents: number;
}
interface AdjustmentUpdate extends ResourceUpdate {
    name?: string | null;
    currency_code?: string | null;
    amount_cents?: number | null;
}
declare class Adjustments extends ApiResource<Adjustment> {
    static readonly TYPE: AdjustmentType;
    create(resource: AdjustmentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Adjustment>;
    update(resource: AdjustmentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Adjustment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    versions(adjustmentId: string | Adjustment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isAdjustment(resource: any): resource is Adjustment;
    relationship(id: string | ResourceId | null): AdjustmentRel;
    type(): AdjustmentType;
}
export default Adjustments;
export type { Adjustment, AdjustmentCreate, AdjustmentUpdate, AdjustmentType };
