import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { AxervePayment, AxervePaymentType } from './axerve_payments';
type AxerveGatewayType = 'axerve_gateways';
type AxerveGatewayRel = ResourceRel & {
    type: AxerveGatewayType;
};
type AxervePaymentRel = ResourceRel & {
    type: AxervePaymentType;
};
interface AxerveGateway extends Resource {
    readonly type: AxerveGatewayType;
    name: string;
    login: string;
    webhook_endpoint_url?: string | null;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    axerve_payments?: AxervePayment[] | null;
}
interface AxerveGatewayCreate extends ResourceCreate {
    name: string;
    login: string;
    api_key: string;
    axerve_payments?: AxervePaymentRel[] | null;
}
interface AxerveGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    login?: string | null;
    api_key?: string | null;
    axerve_payments?: AxervePaymentRel[] | null;
}
declare class AxerveGateways extends ApiResource<AxerveGateway> {
    static readonly TYPE: AxerveGatewayType;
    create(resource: AxerveGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<AxerveGateway>;
    update(resource: AxerveGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<AxerveGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(axerveGatewayId: string | AxerveGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(axerveGatewayId: string | AxerveGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    axerve_payments(axerveGatewayId: string | AxerveGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<AxervePayment>>;
    isAxerveGateway(resource: any): resource is AxerveGateway;
    relationship(id: string | ResourceId | null): AxerveGatewayRel;
    type(): AxerveGatewayType;
}
export default AxerveGateways;
export type { AxerveGateway, AxerveGatewayCreate, AxerveGatewayUpdate, AxerveGatewayType };
