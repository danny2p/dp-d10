import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { CheckoutComPayment, CheckoutComPaymentType } from './checkout_com_payments';
type CheckoutComGatewayType = 'checkout_com_gateways';
type CheckoutComGatewayRel = ResourceRel & {
    type: CheckoutComGatewayType;
};
type CheckoutComPaymentRel = ResourceRel & {
    type: CheckoutComPaymentType;
};
interface CheckoutComGateway extends Resource {
    readonly type: CheckoutComGatewayType;
    name: string;
    webhook_endpoint_id?: string | null;
    webhook_endpoint_secret?: string | null;
    webhook_endpoint_url?: string | null;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    checkout_com_payments?: CheckoutComPayment[] | null;
}
interface CheckoutComGatewayCreate extends ResourceCreate {
    name: string;
    secret_key: string;
    public_key: string;
    checkout_com_payments?: CheckoutComPaymentRel[] | null;
}
interface CheckoutComGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    secret_key?: string | null;
    public_key?: string | null;
    checkout_com_payments?: CheckoutComPaymentRel[] | null;
}
declare class CheckoutComGateways extends ApiResource<CheckoutComGateway> {
    static readonly TYPE: CheckoutComGatewayType;
    create(resource: CheckoutComGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComGateway>;
    update(resource: CheckoutComGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(checkoutComGatewayId: string | CheckoutComGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(checkoutComGatewayId: string | CheckoutComGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    checkout_com_payments(checkoutComGatewayId: string | CheckoutComGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<CheckoutComPayment>>;
    isCheckoutComGateway(resource: any): resource is CheckoutComGateway;
    relationship(id: string | ResourceId | null): CheckoutComGatewayRel;
    type(): CheckoutComGatewayType;
}
export default CheckoutComGateways;
export type { CheckoutComGateway, CheckoutComGatewayCreate, CheckoutComGatewayUpdate, CheckoutComGatewayType };
