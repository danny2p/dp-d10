import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel } from '../resource';
import type { QueryParamsRetrieve } from '../query';
import type { LineItem } from './line_items';
import type { Order } from './orders';
import type { StockItem } from './stock_items';
import type { ReservedStock } from './reserved_stocks';
import type { Sku } from './skus';
type StockReservationType = 'stock_reservations';
type StockReservationRel = ResourceRel & {
    type: StockReservationType;
};
interface StockReservation extends Resource {
    readonly type: StockReservationType;
    status: 'draft' | 'pending';
    quantity: number;
    expires_at: string;
    line_item?: LineItem | null;
    order?: Order | null;
    stock_item?: StockItem | null;
    reserved_stock?: ReservedStock | null;
    sku?: Sku | null;
}
declare class StockReservations extends ApiResource<StockReservation> {
    static readonly TYPE: StockReservationType;
    line_item(stockReservationId: string | StockReservation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<LineItem>;
    order(stockReservationId: string | StockReservation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    stock_item(stockReservationId: string | StockReservation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockItem>;
    reserved_stock(stockReservationId: string | StockReservation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<ReservedStock>;
    sku(stockReservationId: string | StockReservation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Sku>;
    isStockReservation(resource: any): resource is StockReservation;
    relationship(id: string | ResourceId | null): StockReservationRel;
    type(): StockReservationType;
}
export default StockReservations;
export type { StockReservation, StockReservationType };
