import { ApiResource } from '../resource';
import type { Resource, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order } from './orders';
import type { Attachment } from './attachments';
import type { Version } from './versions';
import type { Authorization } from './authorizations';
import type { Refund } from './refunds';
import type { Event } from './events';
type CaptureType = 'captures';
type CaptureRel = ResourceRel & {
    type: CaptureType;
};
interface Capture extends Resource {
    readonly type: CaptureType;
    number: string;
    currency_code: string;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    succeeded: boolean;
    message?: string | null;
    error_code?: string | null;
    error_detail?: string | null;
    token?: string | null;
    gateway_transaction_id?: string | null;
    refund_amount_cents?: number | null;
    refund_amount_float?: number | null;
    formatted_refund_amount?: string | null;
    refund_balance_cents?: number | null;
    refund_balance_float?: number | null;
    formatted_refund_balance?: string | null;
    order?: Order | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
    reference_authorization?: Authorization | null;
    refunds?: Refund[] | null;
    events?: Event[] | null;
}
interface CaptureUpdate extends ResourceUpdate {
    _refund?: boolean | null;
    _refund_amount_cents?: number | null;
}
declare class Captures extends ApiResource<Capture> {
    static readonly TYPE: CaptureType;
    update(resource: CaptureUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Capture>;
    order(captureId: string | Capture, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    attachments(captureId: string | Capture, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(captureId: string | Capture, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    reference_authorization(captureId: string | Capture, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Authorization>;
    refunds(captureId: string | Capture, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Refund>>;
    events(captureId: string | Capture, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    _refund(id: string | Capture, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Capture>;
    _refund_amount_cents(id: string | Capture, triggerValue: number, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Capture>;
    isCapture(resource: any): resource is Capture;
    relationship(id: string | ResourceId | null): CaptureRel;
    type(): CaptureType;
}
export default Captures;
export type { Capture, CaptureUpdate, CaptureType };
