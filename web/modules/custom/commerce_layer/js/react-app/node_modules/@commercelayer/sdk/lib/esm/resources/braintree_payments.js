import { ApiResource } from '../resource';
class BraintreePayments extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: BraintreePayments.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: BraintreePayments.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: BraintreePayments.TYPE } : id, options);
    }
    async order(braintreePaymentId, params, options) {
        const _braintreePaymentId = braintreePaymentId.id || braintreePaymentId;
        return this.resources.fetch({ type: 'orders' }, `braintree_payments/${_braintreePaymentId}/order`, params, options);
    }
    async payment_gateway(braintreePaymentId, params, options) {
        const _braintreePaymentId = braintreePaymentId.id || braintreePaymentId;
        return this.resources.fetch({ type: 'payment_gateways' }, `braintree_payments/${_braintreePaymentId}/payment_gateway`, params, options);
    }
    async versions(braintreePaymentId, params, options) {
        const _braintreePaymentId = braintreePaymentId.id || braintreePaymentId;
        return this.resources.fetch({ type: 'versions' }, `braintree_payments/${_braintreePaymentId}/versions`, params, options);
    }
    isBraintreePayment(resource) {
        return resource.type && (resource.type === BraintreePayments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: BraintreePayments.TYPE } : { id: id.id, type: BraintreePayments.TYPE };
    }
    type() {
        return BraintreePayments.TYPE;
    }
}
BraintreePayments.TYPE = 'braintree_payments';
export default BraintreePayments;
