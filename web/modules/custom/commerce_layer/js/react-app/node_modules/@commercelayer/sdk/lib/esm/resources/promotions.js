import { ApiResource } from '../resource';
class Promotions extends ApiResource {
    async market(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'markets' }, `promotions/${_promotionId}/market`, params, options);
    }
    async order_amount_promotion_rule(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'order_amount_promotion_rules' }, `promotions/${_promotionId}/order_amount_promotion_rule`, params, options);
    }
    async sku_list_promotion_rule(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'sku_list_promotion_rules' }, `promotions/${_promotionId}/sku_list_promotion_rule`, params, options);
    }
    async coupon_codes_promotion_rule(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'coupon_codes_promotion_rules' }, `promotions/${_promotionId}/coupon_codes_promotion_rule`, params, options);
    }
    async coupons(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'coupons' }, `promotions/${_promotionId}/coupons`, params, options);
    }
    async sku_list(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'sku_lists' }, `promotions/${_promotionId}/sku_list`, params, options);
    }
    async attachments(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'attachments' }, `promotions/${_promotionId}/attachments`, params, options);
    }
    async events(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'events' }, `promotions/${_promotionId}/events`, params, options);
    }
    async tags(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'tags' }, `promotions/${_promotionId}/tags`, params, options);
    }
    async versions(promotionId, params, options) {
        const _promotionId = promotionId.id || promotionId;
        return this.resources.fetch({ type: 'versions' }, `promotions/${_promotionId}/versions`, params, options);
    }
    isPromotion(resource) {
        return resource.type && (resource.type === Promotions.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Promotions.TYPE } : { id: id.id, type: Promotions.TYPE };
    }
    type() {
        return Promotions.TYPE;
    }
}
Promotions.TYPE = 'promotions';
export default Promotions;
