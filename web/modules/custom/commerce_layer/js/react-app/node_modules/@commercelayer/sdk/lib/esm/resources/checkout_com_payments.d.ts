import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { Version } from './versions';
type CheckoutComPaymentType = 'checkout_com_payments';
type CheckoutComPaymentRel = ResourceRel & {
    type: CheckoutComPaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface CheckoutComPayment extends Resource {
    readonly type: CheckoutComPaymentType;
    public_key?: string | null;
    payment_type: string;
    token: string;
    session_id?: string | null;
    success_url?: string | null;
    failure_url?: string | null;
    source_id?: string | null;
    customer_token?: string | null;
    redirect_uri?: string | null;
    payment_response?: Record<string, any> | null;
    mismatched_amounts?: boolean | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    versions?: Version[] | null;
}
interface CheckoutComPaymentCreate extends ResourceCreate {
    payment_type: string;
    token: string;
    session_id?: string | null;
    success_url?: string | null;
    failure_url?: string | null;
    order: OrderRel;
}
interface CheckoutComPaymentUpdate extends ResourceUpdate {
    payment_type?: string | null;
    token?: string | null;
    session_id?: string | null;
    success_url?: string | null;
    failure_url?: string | null;
    _details?: boolean | null;
    _refresh?: boolean | null;
    order?: OrderRel | null;
}
declare class CheckoutComPayments extends ApiResource<CheckoutComPayment> {
    static readonly TYPE: CheckoutComPaymentType;
    create(resource: CheckoutComPaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComPayment>;
    update(resource: CheckoutComPaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComPayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(checkoutComPaymentId: string | CheckoutComPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(checkoutComPaymentId: string | CheckoutComPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    versions(checkoutComPaymentId: string | CheckoutComPayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _details(id: string | CheckoutComPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComPayment>;
    _refresh(id: string | CheckoutComPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CheckoutComPayment>;
    isCheckoutComPayment(resource: any): resource is CheckoutComPayment;
    relationship(id: string | ResourceId | null): CheckoutComPaymentRel;
    type(): CheckoutComPaymentType;
}
export default CheckoutComPayments;
export type { CheckoutComPayment, CheckoutComPaymentCreate, CheckoutComPaymentUpdate, CheckoutComPaymentType };
