import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Customer, CustomerType } from './customers';
import type { AdyenPayment, AdyenPaymentType } from './adyen_payments';
import type { AxervePayment, AxervePaymentType } from './axerve_payments';
import type { BraintreePayment, BraintreePaymentType } from './braintree_payments';
import type { CheckoutComPayment, CheckoutComPaymentType } from './checkout_com_payments';
import type { ExternalPayment, ExternalPaymentType } from './external_payments';
import type { KlarnaPayment, KlarnaPaymentType } from './klarna_payments';
import type { SatispayPayment, SatispayPaymentType } from './satispay_payments';
import type { StripePayment, StripePaymentType } from './stripe_payments';
import type { Version } from './versions';
type CustomerPaymentSourceType = 'customer_payment_sources';
type CustomerPaymentSourceRel = ResourceRel & {
    type: CustomerPaymentSourceType;
};
type CustomerRel = ResourceRel & {
    type: CustomerType;
};
type AdyenPaymentRel = ResourceRel & {
    type: AdyenPaymentType;
};
type AxervePaymentRel = ResourceRel & {
    type: AxervePaymentType;
};
type BraintreePaymentRel = ResourceRel & {
    type: BraintreePaymentType;
};
type CheckoutComPaymentRel = ResourceRel & {
    type: CheckoutComPaymentType;
};
type ExternalPaymentRel = ResourceRel & {
    type: ExternalPaymentType;
};
type KlarnaPaymentRel = ResourceRel & {
    type: KlarnaPaymentType;
};
type SatispayPaymentRel = ResourceRel & {
    type: SatispayPaymentType;
};
type StripePaymentRel = ResourceRel & {
    type: StripePaymentType;
};
interface CustomerPaymentSource extends Resource {
    readonly type: CustomerPaymentSourceType;
    name?: string | null;
    customer_token?: string | null;
    payment_source_token?: string | null;
    customer?: Customer | null;
    payment_source?: AdyenPayment | AxervePayment | BraintreePayment | CheckoutComPayment | ExternalPayment | KlarnaPayment | SatispayPayment | StripePayment | null;
    versions?: Version[] | null;
}
interface CustomerPaymentSourceCreate extends ResourceCreate {
    customer: CustomerRel;
    payment_source: AdyenPaymentRel | AxervePaymentRel | BraintreePaymentRel | CheckoutComPaymentRel | ExternalPaymentRel | KlarnaPaymentRel | SatispayPaymentRel | StripePaymentRel;
}
interface CustomerPaymentSourceUpdate extends ResourceUpdate {
    customer?: CustomerRel | null;
    payment_source?: AdyenPaymentRel | AxervePaymentRel | BraintreePaymentRel | CheckoutComPaymentRel | ExternalPaymentRel | KlarnaPaymentRel | SatispayPaymentRel | StripePaymentRel | null;
}
declare class CustomerPaymentSources extends ApiResource<CustomerPaymentSource> {
    static readonly TYPE: CustomerPaymentSourceType;
    create(resource: CustomerPaymentSourceCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerPaymentSource>;
    update(resource: CustomerPaymentSourceUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerPaymentSource>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    customer(customerPaymentSourceId: string | CustomerPaymentSource, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    versions(customerPaymentSourceId: string | CustomerPaymentSource, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isCustomerPaymentSource(resource: any): resource is CustomerPaymentSource;
    relationship(id: string | ResourceId | null): CustomerPaymentSourceRel;
    type(): CustomerPaymentSourceType;
}
export default CustomerPaymentSources;
export type { CustomerPaymentSource, CustomerPaymentSourceCreate, CustomerPaymentSourceUpdate, CustomerPaymentSourceType };
