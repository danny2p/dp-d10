"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Webhooks extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Webhooks.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Webhooks.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Webhooks.TYPE } : id, options);
    }
    async last_event_callbacks(webhookId, params, options) {
        const _webhookId = webhookId.id || webhookId;
        return this.resources.fetch({ type: 'event_callbacks' }, `webhooks/${_webhookId}/last_event_callbacks`, params, options);
    }
    async versions(webhookId, params, options) {
        const _webhookId = webhookId.id || webhookId;
        return this.resources.fetch({ type: 'versions' }, `webhooks/${_webhookId}/versions`, params, options);
    }
    async _reset_circuit(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Webhooks.TYPE, _reset_circuit: true }, params, options);
    }
    isWebhook(resource) {
        return resource.type && (resource.type === Webhooks.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Webhooks.TYPE } : { id: id.id, type: Webhooks.TYPE };
    }
    type() {
        return Webhooks.TYPE;
    }
}
Webhooks.TYPE = 'webhooks';
exports.default = Webhooks;
