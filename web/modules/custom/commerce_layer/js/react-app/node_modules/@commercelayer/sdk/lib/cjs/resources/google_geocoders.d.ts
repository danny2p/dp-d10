import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Address } from './addresses';
import type { Attachment } from './attachments';
type GoogleGeocoderType = 'google_geocoders';
type GoogleGeocoderRel = ResourceRel & {
    type: GoogleGeocoderType;
};
interface GoogleGeocoder extends Resource {
    readonly type: GoogleGeocoderType;
    name: string;
    addresses?: Address[] | null;
    attachments?: Attachment[] | null;
}
interface GoogleGeocoderCreate extends ResourceCreate {
    name: string;
    api_key: string;
}
interface GoogleGeocoderUpdate extends ResourceUpdate {
    name?: string | null;
    api_key?: string | null;
}
declare class GoogleGeocoders extends ApiResource<GoogleGeocoder> {
    static readonly TYPE: GoogleGeocoderType;
    create(resource: GoogleGeocoderCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<GoogleGeocoder>;
    update(resource: GoogleGeocoderUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<GoogleGeocoder>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    addresses(googleGeocoderId: string | GoogleGeocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Address>>;
    attachments(googleGeocoderId: string | GoogleGeocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    isGoogleGeocoder(resource: any): resource is GoogleGeocoder;
    relationship(id: string | ResourceId | null): GoogleGeocoderRel;
    type(): GoogleGeocoderType;
}
export default GoogleGeocoders;
export type { GoogleGeocoder, GoogleGeocoderCreate, GoogleGeocoderUpdate, GoogleGeocoderType };
