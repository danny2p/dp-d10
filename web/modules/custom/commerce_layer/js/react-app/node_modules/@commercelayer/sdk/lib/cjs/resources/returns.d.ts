import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { Customer } from './customers';
import type { StockLocation, StockLocationType } from './stock_locations';
import type { Address } from './addresses';
import type { ReturnLineItem } from './return_line_items';
import type { Attachment } from './attachments';
import type { Event } from './events';
import type { Tag, TagType } from './tags';
import type { Version } from './versions';
type ReturnType = 'returns';
type ReturnRel = ResourceRel & {
    type: ReturnType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
type StockLocationRel = ResourceRel & {
    type: StockLocationType;
};
type TagRel = ResourceRel & {
    type: TagType;
};
interface Return extends Resource {
    readonly type: ReturnType;
    number?: string | null;
    status: 'draft' | 'requested' | 'approved' | 'cancelled' | 'shipped' | 'rejected' | 'received';
    customer_email?: string | null;
    skus_count?: number | null;
    approved_at?: string | null;
    cancelled_at?: string | null;
    shipped_at?: string | null;
    rejected_at?: string | null;
    received_at?: string | null;
    archived_at?: string | null;
    order?: Order | null;
    customer?: Customer | null;
    stock_location?: StockLocation | null;
    origin_address?: Address | null;
    destination_address?: Address | null;
    return_line_items?: ReturnLineItem[] | null;
    attachments?: Attachment[] | null;
    events?: Event[] | null;
    tags?: Tag[] | null;
    versions?: Version[] | null;
}
interface ReturnCreate extends ResourceCreate {
    order: OrderRel;
    stock_location?: StockLocationRel | null;
    tags?: TagRel[] | null;
}
interface ReturnUpdate extends ResourceUpdate {
    _request?: boolean | null;
    _approve?: boolean | null;
    _cancel?: boolean | null;
    _ship?: boolean | null;
    _reject?: boolean | null;
    _receive?: boolean | null;
    _restock?: boolean | null;
    _archive?: boolean | null;
    _unarchive?: boolean | null;
    stock_location?: StockLocationRel | null;
    tags?: TagRel[] | null;
}
declare class Returns extends ApiResource<Return> {
    static readonly TYPE: ReturnType;
    create(resource: ReturnCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    update(resource: ReturnUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(returnId: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    customer(returnId: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    stock_location(returnId: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockLocation>;
    origin_address(returnId: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Address>;
    destination_address(returnId: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Address>;
    return_line_items(returnId: string | Return, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<ReturnLineItem>>;
    attachments(returnId: string | Return, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    events(returnId: string | Return, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    tags(returnId: string | Return, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Tag>>;
    versions(returnId: string | Return, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _request(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _approve(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _cancel(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _ship(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _reject(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _receive(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _restock(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _archive(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    _unarchive(id: string | Return, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Return>;
    isReturn(resource: any): resource is Return;
    relationship(id: string | ResourceId | null): ReturnRel;
    type(): ReturnType;
}
export default Returns;
export type { Return, ReturnCreate, ReturnUpdate, ReturnType };
