import { useReducer } from 'react';
import fetchReducer from '../utils/fetchReducer';
import useValidation from './useValidation';
import resetAll from '../utils/reset';
import { resetSingleField } from '../utils/reset';
import useSubmitValidation from './useSubmitValidation ';
import isEmpty from 'lodash/isEmpty';
import map from 'lodash/map';
import handleChange from '../utils/handleChange';
import setErrors from '../utils/setErrors';
export function useRapidForm(config) {
    const [state, dispatch] = useReducer(fetchReducer, {
        data: {},
        errors: {},
        refs: {},
    });
    const ValidationHook = useValidation(dispatch, config?.fieldEvent);
    const SubmitValidation = useSubmitValidation(dispatch);
    const reset = (e, name) => {
        const target = e.currentTarget || e.target;
        if (name) {
            const field = target.elements.namedItem(name);
            if (field.type === 'checkbox' || field.type === 'radio')
                field.checked = false;
            field.value = '';
            resetSingleField(field, dispatch);
        }
        else {
            target.reset();
            resetAll(dispatch);
        }
    };
    return {
        handleSubmit: (c) => (e) => {
            let tempState = {
                data: {},
                errors: {},
            };
            e.preventDefault();
            map(e.currentTarget.elements, (e) => {
                if (e.name) {
                    const st = handleChange(e, dispatch);
                    tempState = {
                        data: { ...tempState.data, ...st.data },
                        errors: { ...tempState.errors, ...st.errors },
                    };
                }
            });
            const newState = {
                data: isEmpty(state.data) ? tempState.data : state.data,
                errors: isEmpty(state.errors) ? tempState.errors : state.errors,
            };
            return c(newState.data, newState.errors, e);
        },
        errors: state.errors,
        validation: ValidationHook,
        submitValidation: SubmitValidation,
        reset,
        values: state.data,
        setValue: (name, value) => {
            const field = state.refs[name];
            if (field) {
                field.value = value;
                setErrors({
                    checked: field.checked,
                    name,
                    pattern: field.pattern,
                    required: field.required,
                    type: field.type,
                    value,
                }, dispatch);
            }
        },
        setError: (error) => {
            const { name, ...e } = error;
            dispatch({
                type: 'error',
                name,
                errors: {
                    [name]: {
                        ...e,
                        error: true,
                    },
                },
            });
        },
    };
}
