import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { Version } from './versions';
type PaypalPaymentType = 'paypal_payments';
type PaypalPaymentRel = ResourceRel & {
    type: PaypalPaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface PaypalPayment extends Resource {
    readonly type: PaypalPaymentType;
    return_url: string;
    cancel_url: string;
    note_to_payer?: string | null;
    paypal_payer_id?: string | null;
    name?: string | null;
    paypal_id?: string | null;
    status: 'created' | 'approved';
    approval_url?: string | null;
    mismatched_amounts?: boolean | null;
    intent_amount_cents: number;
    intent_amount_float?: number | null;
    formatted_intent_amount?: string | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    versions?: Version[] | null;
}
interface PaypalPaymentCreate extends ResourceCreate {
    return_url: string;
    cancel_url: string;
    note_to_payer?: string | null;
    order: OrderRel;
}
interface PaypalPaymentUpdate extends ResourceUpdate {
    paypal_payer_id?: string | null;
    order?: OrderRel | null;
}
declare class PaypalPayments extends ApiResource<PaypalPayment> {
    static readonly TYPE: PaypalPaymentType;
    create(resource: PaypalPaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaypalPayment>;
    update(resource: PaypalPaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaypalPayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(paypalPaymentId: string | PaypalPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(paypalPaymentId: string | PaypalPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    versions(paypalPaymentId: string | PaypalPayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isPaypalPayment(resource: any): resource is PaypalPayment;
    relationship(id: string | ResourceId | null): PaypalPaymentRel;
    type(): PaypalPaymentType;
}
export default PaypalPayments;
export type { PaypalPayment, PaypalPaymentCreate, PaypalPaymentUpdate, PaypalPaymentType };
