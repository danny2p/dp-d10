import { ApiResource } from '../resource';
class Merchants extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Merchants.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Merchants.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Merchants.TYPE } : id, options);
    }
    async address(merchantId, params, options) {
        const _merchantId = merchantId.id || merchantId;
        return this.resources.fetch({ type: 'addresses' }, `merchants/${_merchantId}/address`, params, options);
    }
    async attachments(merchantId, params, options) {
        const _merchantId = merchantId.id || merchantId;
        return this.resources.fetch({ type: 'attachments' }, `merchants/${_merchantId}/attachments`, params, options);
    }
    async versions(merchantId, params, options) {
        const _merchantId = merchantId.id || merchantId;
        return this.resources.fetch({ type: 'versions' }, `merchants/${_merchantId}/versions`, params, options);
    }
    isMerchant(resource) {
        return resource.type && (resource.type === Merchants.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Merchants.TYPE } : { id: id.id, type: Merchants.TYPE };
    }
    type() {
        return Merchants.TYPE;
    }
}
Merchants.TYPE = 'merchants';
export default Merchants;
