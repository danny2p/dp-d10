import { ApiResource } from '../resource';
class ShippingWeightTiers extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ShippingWeightTiers.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ShippingWeightTiers.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ShippingWeightTiers.TYPE } : id, options);
    }
    async shipping_method(shippingWeightTierId, params, options) {
        const _shippingWeightTierId = shippingWeightTierId.id || shippingWeightTierId;
        return this.resources.fetch({ type: 'shipping_methods' }, `shipping_weight_tiers/${_shippingWeightTierId}/shipping_method`, params, options);
    }
    async attachments(shippingWeightTierId, params, options) {
        const _shippingWeightTierId = shippingWeightTierId.id || shippingWeightTierId;
        return this.resources.fetch({ type: 'attachments' }, `shipping_weight_tiers/${_shippingWeightTierId}/attachments`, params, options);
    }
    async versions(shippingWeightTierId, params, options) {
        const _shippingWeightTierId = shippingWeightTierId.id || shippingWeightTierId;
        return this.resources.fetch({ type: 'versions' }, `shipping_weight_tiers/${_shippingWeightTierId}/versions`, params, options);
    }
    isShippingWeightTier(resource) {
        return resource.type && (resource.type === ShippingWeightTiers.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ShippingWeightTiers.TYPE } : { id: id.id, type: ShippingWeightTiers.TYPE };
    }
    type() {
        return ShippingWeightTiers.TYPE;
    }
}
ShippingWeightTiers.TYPE = 'shipping_weight_tiers';
export default ShippingWeightTiers;
