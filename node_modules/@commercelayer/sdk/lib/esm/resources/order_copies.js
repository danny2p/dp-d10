import { ApiResource } from '../resource';
class OrderCopies extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: OrderCopies.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: OrderCopies.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: OrderCopies.TYPE } : id, options);
    }
    async source_order(orderCopyId, params, options) {
        const _orderCopyId = orderCopyId.id || orderCopyId;
        return this.resources.fetch({ type: 'orders' }, `order_copies/${_orderCopyId}/source_order`, params, options);
    }
    async target_order(orderCopyId, params, options) {
        const _orderCopyId = orderCopyId.id || orderCopyId;
        return this.resources.fetch({ type: 'orders' }, `order_copies/${_orderCopyId}/target_order`, params, options);
    }
    async events(orderCopyId, params, options) {
        const _orderCopyId = orderCopyId.id || orderCopyId;
        return this.resources.fetch({ type: 'events' }, `order_copies/${_orderCopyId}/events`, params, options);
    }
    async order_subscription(orderCopyId, params, options) {
        const _orderCopyId = orderCopyId.id || orderCopyId;
        return this.resources.fetch({ type: 'order_subscriptions' }, `order_copies/${_orderCopyId}/order_subscription`, params, options);
    }
    isOrderCopy(resource) {
        return resource.type && (resource.type === OrderCopies.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: OrderCopies.TYPE } : { id: id.id, type: OrderCopies.TYPE };
    }
    type() {
        return OrderCopies.TYPE;
    }
}
OrderCopies.TYPE = 'order_copies';
export default OrderCopies;
