import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Event } from './events';
type ImportType = 'imports';
type ImportRel = ResourceRel & {
    type: ImportType;
};
interface Import extends Resource {
    readonly type: ImportType;
    resource_type: string;
    format?: string | null;
    parent_resource_id?: string | null;
    status: 'pending' | 'in_progress' | 'interrupted' | 'completed';
    started_at?: string | null;
    completed_at?: string | null;
    interrupted_at?: string | null;
    inputs: Array<Record<string, any>>;
    inputs_size?: number | null;
    errors_count?: number | null;
    warnings_count?: number | null;
    processed_count?: number | null;
    errors_log?: Record<string, any> | null;
    warnings_log?: Record<string, any> | null;
    cleanup_records?: boolean | null;
    attachment_url?: string | null;
    events?: Event[] | null;
}
interface ImportCreate extends ResourceCreate {
    resource_type: string;
    format?: string | null;
    parent_resource_id?: string | null;
    inputs: Array<Record<string, any>>;
    cleanup_records?: boolean | null;
}
declare class Imports extends ApiResource<Import> {
    static readonly TYPE: ImportType;
    create(resource: ImportCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Import>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    events(importId: string | Import, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    isImport(resource: any): resource is Import;
    relationship(id: string | ResourceId | null): ImportRel;
    type(): ImportType;
}
export default Imports;
export type { Import, ImportCreate, ImportType };
