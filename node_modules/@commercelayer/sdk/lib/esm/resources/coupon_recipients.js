import { ApiResource } from '../resource';
class CouponRecipients extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CouponRecipients.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CouponRecipients.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CouponRecipients.TYPE } : id, options);
    }
    async customer(couponRecipientId, params, options) {
        const _couponRecipientId = couponRecipientId.id || couponRecipientId;
        return this.resources.fetch({ type: 'customers' }, `coupon_recipients/${_couponRecipientId}/customer`, params, options);
    }
    async attachments(couponRecipientId, params, options) {
        const _couponRecipientId = couponRecipientId.id || couponRecipientId;
        return this.resources.fetch({ type: 'attachments' }, `coupon_recipients/${_couponRecipientId}/attachments`, params, options);
    }
    async versions(couponRecipientId, params, options) {
        const _couponRecipientId = couponRecipientId.id || couponRecipientId;
        return this.resources.fetch({ type: 'versions' }, `coupon_recipients/${_couponRecipientId}/versions`, params, options);
    }
    isCouponRecipient(resource) {
        return resource.type && (resource.type === CouponRecipients.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CouponRecipients.TYPE } : { id: id.id, type: CouponRecipients.TYPE };
    }
    type() {
        return CouponRecipients.TYPE;
    }
}
CouponRecipients.TYPE = 'coupon_recipients';
export default CouponRecipients;
