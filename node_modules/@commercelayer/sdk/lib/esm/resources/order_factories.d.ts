import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order } from './orders';
import type { Event } from './events';
type OrderFactoryType = 'order_factories';
type OrderFactoryRel = ResourceRel & {
    type: OrderFactoryType;
};
interface OrderFactory extends Resource {
    readonly type: OrderFactoryType;
    status: 'pending' | 'in_progress' | 'failed' | 'completed';
    started_at?: string | null;
    completed_at?: string | null;
    failed_at?: string | null;
    errors_log?: Record<string, any> | null;
    errors_count?: number | null;
    place_target_order?: boolean | null;
    reuse_wallet?: boolean | null;
    source_order?: Order | null;
    target_order?: Order | null;
    events?: Event[] | null;
}
declare class OrderFactories extends ApiResource<OrderFactory> {
    static readonly TYPE: OrderFactoryType;
    source_order(orderFactoryId: string | OrderFactory, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    target_order(orderFactoryId: string | OrderFactory, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    events(orderFactoryId: string | OrderFactory, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    isOrderFactory(resource: any): resource is OrderFactory;
    relationship(id: string | ResourceId | null): OrderFactoryRel;
    type(): OrderFactoryType;
}
export default OrderFactories;
export type { OrderFactory, OrderFactoryType };
