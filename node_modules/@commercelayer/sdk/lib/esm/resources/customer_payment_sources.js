import { ApiResource } from '../resource';
class CustomerPaymentSources extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CustomerPaymentSources.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CustomerPaymentSources.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CustomerPaymentSources.TYPE } : id, options);
    }
    async customer(customerPaymentSourceId, params, options) {
        const _customerPaymentSourceId = customerPaymentSourceId.id || customerPaymentSourceId;
        return this.resources.fetch({ type: 'customers' }, `customer_payment_sources/${_customerPaymentSourceId}/customer`, params, options);
    }
    async versions(customerPaymentSourceId, params, options) {
        const _customerPaymentSourceId = customerPaymentSourceId.id || customerPaymentSourceId;
        return this.resources.fetch({ type: 'versions' }, `customer_payment_sources/${_customerPaymentSourceId}/versions`, params, options);
    }
    isCustomerPaymentSource(resource) {
        return resource.type && (resource.type === CustomerPaymentSources.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CustomerPaymentSources.TYPE } : { id: id.id, type: CustomerPaymentSources.TYPE };
    }
    type() {
        return CustomerPaymentSources.TYPE;
    }
}
CustomerPaymentSources.TYPE = 'customer_payment_sources';
export default CustomerPaymentSources;
