import { ApiResource } from '../resource';
class CustomerPasswordResets extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CustomerPasswordResets.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CustomerPasswordResets.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CustomerPasswordResets.TYPE } : id, options);
    }
    async customer(customerPasswordResetId, params, options) {
        const _customerPasswordResetId = customerPasswordResetId.id || customerPasswordResetId;
        return this.resources.fetch({ type: 'customers' }, `customer_password_resets/${_customerPasswordResetId}/customer`, params, options);
    }
    async events(customerPasswordResetId, params, options) {
        const _customerPasswordResetId = customerPasswordResetId.id || customerPasswordResetId;
        return this.resources.fetch({ type: 'events' }, `customer_password_resets/${_customerPasswordResetId}/events`, params, options);
    }
    async _reset_password_token(id, triggerValue, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: CustomerPasswordResets.TYPE, _reset_password_token: triggerValue }, params, options);
    }
    isCustomerPasswordReset(resource) {
        return resource.type && (resource.type === CustomerPasswordResets.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CustomerPasswordResets.TYPE } : { id: id.id, type: CustomerPasswordResets.TYPE };
    }
    type() {
        return CustomerPasswordResets.TYPE;
    }
}
CustomerPasswordResets.TYPE = 'customer_password_resets';
export default CustomerPasswordResets;
