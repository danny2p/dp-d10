import { ApiResource } from '../resource';
class ShippingCategories extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ShippingCategories.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ShippingCategories.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ShippingCategories.TYPE } : id, options);
    }
    async skus(shippingCategoryId, params, options) {
        const _shippingCategoryId = shippingCategoryId.id || shippingCategoryId;
        return this.resources.fetch({ type: 'skus' }, `shipping_categories/${_shippingCategoryId}/skus`, params, options);
    }
    async attachments(shippingCategoryId, params, options) {
        const _shippingCategoryId = shippingCategoryId.id || shippingCategoryId;
        return this.resources.fetch({ type: 'attachments' }, `shipping_categories/${_shippingCategoryId}/attachments`, params, options);
    }
    async versions(shippingCategoryId, params, options) {
        const _shippingCategoryId = shippingCategoryId.id || shippingCategoryId;
        return this.resources.fetch({ type: 'versions' }, `shipping_categories/${_shippingCategoryId}/versions`, params, options);
    }
    isShippingCategory(resource) {
        return resource.type && (resource.type === ShippingCategories.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ShippingCategories.TYPE } : { id: id.id, type: ShippingCategories.TYPE };
    }
    type() {
        return ShippingCategories.TYPE;
    }
}
ShippingCategories.TYPE = 'shipping_categories';
export default ShippingCategories;
