import { ApiResource } from '../resource';
class ParcelLineItems extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ParcelLineItems.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ParcelLineItems.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ParcelLineItems.TYPE } : id, options);
    }
    async parcel(parcelLineItemId, params, options) {
        const _parcelLineItemId = parcelLineItemId.id || parcelLineItemId;
        return this.resources.fetch({ type: 'parcels' }, `parcel_line_items/${_parcelLineItemId}/parcel`, params, options);
    }
    async stock_line_item(parcelLineItemId, params, options) {
        const _parcelLineItemId = parcelLineItemId.id || parcelLineItemId;
        return this.resources.fetch({ type: 'stock_line_items' }, `parcel_line_items/${_parcelLineItemId}/stock_line_item`, params, options);
    }
    async versions(parcelLineItemId, params, options) {
        const _parcelLineItemId = parcelLineItemId.id || parcelLineItemId;
        return this.resources.fetch({ type: 'versions' }, `parcel_line_items/${_parcelLineItemId}/versions`, params, options);
    }
    isParcelLineItem(resource) {
        return resource.type && (resource.type === ParcelLineItems.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ParcelLineItems.TYPE } : { id: id.id, type: ParcelLineItems.TYPE };
    }
    type() {
        return ParcelLineItems.TYPE;
    }
}
ParcelLineItems.TYPE = 'parcel_line_items';
export default ParcelLineItems;
