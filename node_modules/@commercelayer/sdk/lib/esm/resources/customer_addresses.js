import { ApiResource } from '../resource';
class CustomerAddresses extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: CustomerAddresses.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: CustomerAddresses.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: CustomerAddresses.TYPE } : id, options);
    }
    async customer(customerAddressId, params, options) {
        const _customerAddressId = customerAddressId.id || customerAddressId;
        return this.resources.fetch({ type: 'customers' }, `customer_addresses/${_customerAddressId}/customer`, params, options);
    }
    async address(customerAddressId, params, options) {
        const _customerAddressId = customerAddressId.id || customerAddressId;
        return this.resources.fetch({ type: 'addresses' }, `customer_addresses/${_customerAddressId}/address`, params, options);
    }
    async events(customerAddressId, params, options) {
        const _customerAddressId = customerAddressId.id || customerAddressId;
        return this.resources.fetch({ type: 'events' }, `customer_addresses/${_customerAddressId}/events`, params, options);
    }
    async versions(customerAddressId, params, options) {
        const _customerAddressId = customerAddressId.id || customerAddressId;
        return this.resources.fetch({ type: 'versions' }, `customer_addresses/${_customerAddressId}/versions`, params, options);
    }
    isCustomerAddress(resource) {
        return resource.type && (resource.type === CustomerAddresses.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: CustomerAddresses.TYPE } : { id: id.id, type: CustomerAddresses.TYPE };
    }
    type() {
        return CustomerAddresses.TYPE;
    }
}
CustomerAddresses.TYPE = 'customer_addresses';
export default CustomerAddresses;
