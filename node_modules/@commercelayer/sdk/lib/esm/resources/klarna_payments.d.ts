import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { Version } from './versions';
type KlarnaPaymentType = 'klarna_payments';
type KlarnaPaymentRel = ResourceRel & {
    type: KlarnaPaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface KlarnaPayment extends Resource {
    readonly type: KlarnaPaymentType;
    session_id?: string | null;
    client_token?: string | null;
    payment_methods: Array<Record<string, any>>;
    auth_token?: string | null;
    mismatched_amounts?: boolean | null;
    intent_amount_cents: number;
    intent_amount_float?: number | null;
    formatted_intent_amount?: string | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    versions?: Version[] | null;
}
interface KlarnaPaymentCreate extends ResourceCreate {
    order: OrderRel;
}
interface KlarnaPaymentUpdate extends ResourceUpdate {
    auth_token?: string | null;
    _update?: boolean | null;
    order?: OrderRel | null;
}
declare class KlarnaPayments extends ApiResource<KlarnaPayment> {
    static readonly TYPE: KlarnaPaymentType;
    create(resource: KlarnaPaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<KlarnaPayment>;
    update(resource: KlarnaPaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<KlarnaPayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(klarnaPaymentId: string | KlarnaPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(klarnaPaymentId: string | KlarnaPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    versions(klarnaPaymentId: string | KlarnaPayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _update(id: string | KlarnaPayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<KlarnaPayment>;
    isKlarnaPayment(resource: any): resource is KlarnaPayment;
    relationship(id: string | ResourceId | null): KlarnaPaymentRel;
    type(): KlarnaPaymentType;
}
export default KlarnaPayments;
export type { KlarnaPayment, KlarnaPaymentCreate, KlarnaPaymentUpdate, KlarnaPaymentType };
