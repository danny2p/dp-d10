import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Price } from './prices';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type PriceTierType = 'price_tiers';
type PriceTierRel = ResourceRel & {
    type: PriceTierType;
};
interface PriceTier extends Resource {
    readonly type: PriceTierType;
    name: string;
    up_to?: number | null;
    price_amount_cents: number;
    price_amount_float?: number | null;
    formatted_price_amount?: string | null;
    price?: Price | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
declare class PriceTiers extends ApiResource<PriceTier> {
    static readonly TYPE: PriceTierType;
    price(priceTierId: string | PriceTier, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Price>;
    attachments(priceTierId: string | PriceTier, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(priceTierId: string | PriceTier, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isPriceTier(resource: any): resource is PriceTier;
    relationship(id: string | ResourceId | null): PriceTierRel;
    type(): PriceTierType;
}
export default PriceTiers;
export type { PriceTier, PriceTierType };
