import { ApiResource } from '../resource';
class StripeGateways extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: StripeGateways.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: StripeGateways.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: StripeGateways.TYPE } : id, options);
    }
    async payment_methods(stripeGatewayId, params, options) {
        const _stripeGatewayId = stripeGatewayId.id || stripeGatewayId;
        return this.resources.fetch({ type: 'payment_methods' }, `stripe_gateways/${_stripeGatewayId}/payment_methods`, params, options);
    }
    async versions(stripeGatewayId, params, options) {
        const _stripeGatewayId = stripeGatewayId.id || stripeGatewayId;
        return this.resources.fetch({ type: 'versions' }, `stripe_gateways/${_stripeGatewayId}/versions`, params, options);
    }
    async stripe_payments(stripeGatewayId, params, options) {
        const _stripeGatewayId = stripeGatewayId.id || stripeGatewayId;
        return this.resources.fetch({ type: 'stripe_payments' }, `stripe_gateways/${_stripeGatewayId}/stripe_payments`, params, options);
    }
    isStripeGateway(resource) {
        return resource.type && (resource.type === StripeGateways.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: StripeGateways.TYPE } : { id: id.id, type: StripeGateways.TYPE };
    }
    type() {
        return StripeGateways.TYPE;
    }
}
StripeGateways.TYPE = 'stripe_gateways';
export default StripeGateways;
