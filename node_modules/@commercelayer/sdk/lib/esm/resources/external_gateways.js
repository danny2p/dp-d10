import { ApiResource } from '../resource';
class ExternalGateways extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ExternalGateways.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ExternalGateways.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ExternalGateways.TYPE } : id, options);
    }
    async payment_methods(externalGatewayId, params, options) {
        const _externalGatewayId = externalGatewayId.id || externalGatewayId;
        return this.resources.fetch({ type: 'payment_methods' }, `external_gateways/${_externalGatewayId}/payment_methods`, params, options);
    }
    async versions(externalGatewayId, params, options) {
        const _externalGatewayId = externalGatewayId.id || externalGatewayId;
        return this.resources.fetch({ type: 'versions' }, `external_gateways/${_externalGatewayId}/versions`, params, options);
    }
    async external_payments(externalGatewayId, params, options) {
        const _externalGatewayId = externalGatewayId.id || externalGatewayId;
        return this.resources.fetch({ type: 'external_payments' }, `external_gateways/${_externalGatewayId}/external_payments`, params, options);
    }
    isExternalGateway(resource) {
        return resource.type && (resource.type === ExternalGateways.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ExternalGateways.TYPE } : { id: id.id, type: ExternalGateways.TYPE };
    }
    type() {
        return ExternalGateways.TYPE;
    }
}
ExternalGateways.TYPE = 'external_gateways';
export default ExternalGateways;
