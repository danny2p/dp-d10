import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order } from './orders';
import type { Attachment } from './attachments';
import type { Version } from './versions';
import type { Capture } from './captures';
import type { Event } from './events';
type RefundType = 'refunds';
type RefundRel = ResourceRel & {
    type: RefundType;
};
interface Refund extends Resource {
    readonly type: RefundType;
    number: string;
    currency_code: string;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    succeeded: boolean;
    message?: string | null;
    error_code?: string | null;
    error_detail?: string | null;
    token?: string | null;
    gateway_transaction_id?: string | null;
    order?: Order | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
    reference_capture?: Capture | null;
    events?: Event[] | null;
}
declare class Refunds extends ApiResource<Refund> {
    static readonly TYPE: RefundType;
    order(refundId: string | Refund, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    attachments(refundId: string | Refund, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(refundId: string | Refund, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    reference_capture(refundId: string | Refund, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Capture>;
    events(refundId: string | Refund, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    isRefund(resource: any): resource is Refund;
    relationship(id: string | ResourceId | null): RefundRel;
    type(): RefundType;
}
export default Refunds;
export type { Refund, RefundType };
