import { ApiResource } from '../resource';
class ReturnLineItems extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ReturnLineItems.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ReturnLineItems.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ReturnLineItems.TYPE } : id, options);
    }
    async return(returnLineItemId, params, options) {
        const _returnLineItemId = returnLineItemId.id || returnLineItemId;
        return this.resources.fetch({ type: 'returns' }, `return_line_items/${_returnLineItemId}/return`, params, options);
    }
    async line_item(returnLineItemId, params, options) {
        const _returnLineItemId = returnLineItemId.id || returnLineItemId;
        return this.resources.fetch({ type: 'line_items' }, `return_line_items/${_returnLineItemId}/line_item`, params, options);
    }
    async _restock(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: ReturnLineItems.TYPE, _restock: true }, params, options);
    }
    isReturnLineItem(resource) {
        return resource.type && (resource.type === ReturnLineItems.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ReturnLineItems.TYPE } : { id: id.id, type: ReturnLineItems.TYPE };
    }
    type() {
        return ReturnLineItems.TYPE;
    }
}
ReturnLineItems.TYPE = 'return_line_items';
export default ReturnLineItems;
