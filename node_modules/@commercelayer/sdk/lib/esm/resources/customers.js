import { ApiResource } from '../resource';
class Customers extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Customers.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Customers.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Customers.TYPE } : id, options);
    }
    async customer_group(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'customer_groups' }, `customers/${_customerId}/customer_group`, params, options);
    }
    async customer_addresses(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'customer_addresses' }, `customers/${_customerId}/customer_addresses`, params, options);
    }
    async customer_payment_sources(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'customer_payment_sources' }, `customers/${_customerId}/customer_payment_sources`, params, options);
    }
    async customer_subscriptions(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'customer_subscriptions' }, `customers/${_customerId}/customer_subscriptions`, params, options);
    }
    async orders(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'orders' }, `customers/${_customerId}/orders`, params, options);
    }
    async order_subscriptions(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'order_subscriptions' }, `customers/${_customerId}/order_subscriptions`, params, options);
    }
    async returns(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'returns' }, `customers/${_customerId}/returns`, params, options);
    }
    async sku_lists(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'sku_lists' }, `customers/${_customerId}/sku_lists`, params, options);
    }
    async attachments(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'attachments' }, `customers/${_customerId}/attachments`, params, options);
    }
    async events(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'events' }, `customers/${_customerId}/events`, params, options);
    }
    async tags(customerId, params, options) {
        const _customerId = customerId.id || customerId;
        return this.resources.fetch({ type: 'tags' }, `customers/${_customerId}/tags`, params, options);
    }
    isCustomer(resource) {
        return resource.type && (resource.type === Customers.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Customers.TYPE } : { id: id.id, type: Customers.TYPE };
    }
    type() {
        return Customers.TYPE;
    }
}
Customers.TYPE = 'customers';
export default Customers;
