import { ApiResource } from '../resource';
class StockItems extends ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: StockItems.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: StockItems.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: StockItems.TYPE } : id, options);
    }
    async stock_location(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'stock_locations' }, `stock_items/${_stockItemId}/stock_location`, params, options);
    }
    async sku(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'skus' }, `stock_items/${_stockItemId}/sku`, params, options);
    }
    async reserved_stock(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'reserved_stocks' }, `stock_items/${_stockItemId}/reserved_stock`, params, options);
    }
    async stock_reservations(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'stock_reservations' }, `stock_items/${_stockItemId}/stock_reservations`, params, options);
    }
    async attachments(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'attachments' }, `stock_items/${_stockItemId}/attachments`, params, options);
    }
    async versions(stockItemId, params, options) {
        const _stockItemId = stockItemId.id || stockItemId;
        return this.resources.fetch({ type: 'versions' }, `stock_items/${_stockItemId}/versions`, params, options);
    }
    isStockItem(resource) {
        return resource.type && (resource.type === StockItems.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: StockItems.TYPE } : { id: id.id, type: StockItems.TYPE };
    }
    type() {
        return StockItems.TYPE;
    }
}
StockItems.TYPE = 'stock_items';
export default StockItems;
