import axios from 'axios';
var ErrorType;
(function (ErrorType) {
    ErrorType["CLIENT"] = "client";
    ErrorType["REQUEST"] = "request";
    ErrorType["RESPONSE"] = "response";
    ErrorType["GENERIC"] = "generic";
    ErrorType["CANCEL"] = "cancel";
})(ErrorType || (ErrorType = {}));
class SdkError extends Error {
    static isSdkError(error) {
        return error && [SdkError.NAME, ApiError.NAME].includes(error.name) && Object.values(ErrorType).includes(error.type);
    }
    constructor(error) {
        super(error.message);
        this.name = SdkError.NAME; // this.constructor.name
        this.type = error.type || ErrorType.GENERIC;
    }
}
SdkError.NAME = 'SdkError';
class ApiError extends SdkError {
    static isApiError(error) {
        return SdkError.isSdkError(error) && (error.name === ApiError.NAME) && (error.type === ErrorType.RESPONSE);
    }
    constructor(error) {
        super({ ...error, type: ErrorType.RESPONSE });
        this.errors = [];
        this.name = ApiError.NAME; // this.constructor.name
    }
    first() {
        var _a;
        return (((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length) > 0) ? this.errors[0] : undefined;
    }
}
ApiError.NAME = 'ApiError';
const handleError = (error) => {
    let sdkError = new SdkError({ message: error.message });
    if (axios.isAxiosError(error)) {
        if (error.response) {
            // The request was made and the server responded with a status code that falls out of the range of 2xx
            const apiError = new ApiError(sdkError);
            apiError.type = ErrorType.RESPONSE;
            apiError.status = error.response.status;
            apiError.statusText = error.response.statusText;
            apiError.code = String(apiError.status);
            apiError.errors = error.response.data.errors;
            if (!apiError.message && apiError.statusText)
                apiError.message = apiError.statusText;
            sdkError = apiError;
        }
        else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js
            sdkError.type = ErrorType.REQUEST;
            sdkError.request = error.request;
        }
        else {
            // Something happened in setting up the request that triggered an Error
            sdkError.type = ErrorType.CLIENT;
        }
    }
    else if (axios.isCancel(error))
        sdkError.type = ErrorType.CANCEL;
    else
        sdkError.source = error;
    throw sdkError;
};
export { SdkError, ApiError, ErrorType, handleError };
