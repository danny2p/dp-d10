/// <reference types="node" />
/// <reference types="node" />
import type { AxiosAdapter, AxiosProxyConfig, Method } from 'axios';
import type { InterceptorManager } from './interceptor';
import type { Agent as HttpAgent } from 'http';
import type { Agent as HttpsAgent } from 'https';
type ProxyConfig = AxiosProxyConfig | false;
type Adapter = AxiosAdapter;
type RequestParams = Record<string, string | number | boolean>;
type RequestHeaders = Record<string, string>;
type RequestConfig = {
    timeout?: number;
    params?: RequestParams;
    httpAgent?: HttpAgent;
    httpsAgent?: HttpsAgent;
    proxy?: ProxyConfig;
    headers?: RequestHeaders;
};
type ApiConfig = {
    organization: string;
    domain?: string;
    accessToken: string;
};
type ApiClientInitConfig = ApiConfig & RequestConfig & {
    adapter?: Adapter;
};
type ApiClientConfig = Partial<ApiClientInitConfig>;
declare class ApiClient {
    #private;
    static create(options: ApiClientInitConfig): ApiClient;
    baseUrl: string;
    interceptors: InterceptorManager;
    private constructor();
    config(config: ApiClientConfig): ApiClient;
    adapter(adapter: Adapter): ApiClient;
    request(method: Method, path: string, body?: any, options?: ApiClientConfig): Promise<any>;
    private customHeaders;
}
export default ApiClient;
export type { ApiClientInitConfig, ApiClientConfig, RequestConfig };
