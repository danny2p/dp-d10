"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ApiClient_accessToken, _ApiClient_client;
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const error_1 = require("./error");
const config_1 = __importDefault(require("./config"));
const debug_1 = __importDefault(require("./debug"));
const debug = (0, debug_1.default)('client');
const baseURL = (organization, domain) => {
    return `https://${organization.toLowerCase()}.${domain || config_1.default.default.domain}/api`;
};
class ApiClient {
    static create(options) {
        for (const attr of config_1.default.client.requiredAttributes)
            if (!options || !options[attr])
                throw new error_1.SdkError({ message: `Undefined '${attr}' parameter` });
        return new ApiClient(options);
    }
    constructor(options) {
        _ApiClient_accessToken.set(this, void 0);
        _ApiClient_client.set(this, void 0);
        debug('new client instance %O', options);
        this.baseUrl = baseURL(options.organization, options.domain);
        __classPrivateFieldSet(this, _ApiClient_accessToken, options.accessToken, "f");
        const axiosConfig = {
            timeout: options.timeout || config_1.default.client.timeout,
            proxy: options.proxy,
            httpAgent: options.httpAgent,
            httpsAgent: options.httpsAgent,
        };
        // Set custom headers
        const customHeaders = this.customHeaders(options.headers);
        const axiosOptions = {
            baseURL: this.baseUrl,
            timeout: config_1.default.client.timeout,
            headers: {
                ...customHeaders,
                'Accept': 'application/vnd.api+json',
                'Content-Type': 'application/vnd.api+json',
                'Authorization': 'Bearer ' + __classPrivateFieldGet(this, _ApiClient_accessToken, "f")
            },
            ...axiosConfig
        };
        if (options.adapter)
            axiosOptions.adapter = options.adapter;
        debug('axios options: %O', axiosOptions);
        __classPrivateFieldSet(this, _ApiClient_client, axios_1.default.create(axiosOptions), "f");
        this.interceptors = __classPrivateFieldGet(this, _ApiClient_client, "f").interceptors;
    }
    config(config) {
        debug('config %o', config);
        const def = __classPrivateFieldGet(this, _ApiClient_client, "f").defaults;
        // Axios config
        if (config.timeout)
            def.timeout = config.timeout;
        if (config.proxy)
            def.proxy = config.proxy;
        if (config.httpAgent)
            def.httpAgent = config.httpAgent;
        if (config.httpsAgent)
            def.httpsAgent = config.httpsAgent;
        // API Client config
        if (config.organization)
            this.baseUrl = baseURL(config.organization, config.domain);
        if (config.accessToken) {
            __classPrivateFieldSet(this, _ApiClient_accessToken, config.accessToken, "f");
            def.headers.common.Authorization = 'Bearer ' + __classPrivateFieldGet(this, _ApiClient_accessToken, "f");
        }
        if (config.headers)
            def.headers.common = this.customHeaders(config.headers);
        if (config.adapter)
            this.adapter(config.adapter);
        return this;
    }
    adapter(adapter) {
        if (adapter)
            __classPrivateFieldGet(this, _ApiClient_client, "f").defaults.adapter = adapter;
        return this;
    }
    async request(method, path, body, options) {
        debug('request %s %s, %O, %O', method, path, body || {}, options || {});
        const data = body ? { data: body } : undefined;
        const url = path;
        // Runtime request parameters
        const baseUrl = (options === null || options === void 0 ? void 0 : options.organization) ? baseURL(options.organization, options.domain) : undefined;
        const accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || __classPrivateFieldGet(this, _ApiClient_accessToken, "f");
        const headers = this.customHeaders(options === null || options === void 0 ? void 0 : options.headers);
        if (accessToken)
            headers.Authorization = 'Bearer ' + accessToken;
        const requestParams = { method, baseURL: baseUrl, url, data, ...options, headers };
        debug('request params: %O', requestParams);
        // const start = Date.now()
        return __classPrivateFieldGet(this, _ApiClient_client, "f").request(requestParams)
            .then(response => response.data)
            .catch(error => (0, error_1.handleError)(error));
        // .finally(() => console.log(`<<-- ${method} ${path} ${Date.now() - start}`))
    }
    customHeaders(headers) {
        const customHeaders = {};
        if (headers) {
            for (const [name, value] of Object.entries(headers))
                if (!['accept', 'content-type', 'authorization'].includes(name.toLowerCase()))
                    customHeaders[name] = value;
        }
        return customHeaders;
    }
}
_ApiClient_accessToken = new WeakMap(), _ApiClient_client = new WeakMap();
exports.default = ApiClient;
