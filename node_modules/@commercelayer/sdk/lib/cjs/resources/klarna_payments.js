"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class KlarnaPayments extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: KlarnaPayments.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: KlarnaPayments.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: KlarnaPayments.TYPE } : id, options);
    }
    async order(klarnaPaymentId, params, options) {
        const _klarnaPaymentId = klarnaPaymentId.id || klarnaPaymentId;
        return this.resources.fetch({ type: 'orders' }, `klarna_payments/${_klarnaPaymentId}/order`, params, options);
    }
    async payment_gateway(klarnaPaymentId, params, options) {
        const _klarnaPaymentId = klarnaPaymentId.id || klarnaPaymentId;
        return this.resources.fetch({ type: 'payment_gateways' }, `klarna_payments/${_klarnaPaymentId}/payment_gateway`, params, options);
    }
    async versions(klarnaPaymentId, params, options) {
        const _klarnaPaymentId = klarnaPaymentId.id || klarnaPaymentId;
        return this.resources.fetch({ type: 'versions' }, `klarna_payments/${_klarnaPaymentId}/versions`, params, options);
    }
    async _update(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: KlarnaPayments.TYPE, _update: true }, params, options);
    }
    isKlarnaPayment(resource) {
        return resource.type && (resource.type === KlarnaPayments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: KlarnaPayments.TYPE } : { id: id.id, type: KlarnaPayments.TYPE };
    }
    type() {
        return KlarnaPayments.TYPE;
    }
}
KlarnaPayments.TYPE = 'klarna_payments';
exports.default = KlarnaPayments;
