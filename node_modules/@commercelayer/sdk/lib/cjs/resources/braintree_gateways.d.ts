import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
import type { BraintreePayment, BraintreePaymentType } from './braintree_payments';
type BraintreeGatewayType = 'braintree_gateways';
type BraintreeGatewayRel = ResourceRel & {
    type: BraintreeGatewayType;
};
type BraintreePaymentRel = ResourceRel & {
    type: BraintreePaymentType;
};
interface BraintreeGateway extends Resource {
    readonly type: BraintreeGatewayType;
    name: string;
    descriptor_name?: string | null;
    descriptor_phone?: string | null;
    descriptor_url?: string | null;
    webhook_endpoint_url?: string | null;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
    braintree_payments?: BraintreePayment[] | null;
}
interface BraintreeGatewayCreate extends ResourceCreate {
    name: string;
    merchant_account_id: string;
    merchant_id: string;
    public_key: string;
    private_key: string;
    descriptor_name?: string | null;
    descriptor_phone?: string | null;
    descriptor_url?: string | null;
    braintree_payments?: BraintreePaymentRel[] | null;
}
interface BraintreeGatewayUpdate extends ResourceUpdate {
    name?: string | null;
    merchant_account_id?: string | null;
    merchant_id?: string | null;
    public_key?: string | null;
    private_key?: string | null;
    descriptor_name?: string | null;
    descriptor_phone?: string | null;
    descriptor_url?: string | null;
    braintree_payments?: BraintreePaymentRel[] | null;
}
declare class BraintreeGateways extends ApiResource<BraintreeGateway> {
    static readonly TYPE: BraintreeGatewayType;
    create(resource: BraintreeGatewayCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BraintreeGateway>;
    update(resource: BraintreeGatewayUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<BraintreeGateway>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    payment_methods(braintreeGatewayId: string | BraintreeGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(braintreeGatewayId: string | BraintreeGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    braintree_payments(braintreeGatewayId: string | BraintreeGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<BraintreePayment>>;
    isBraintreeGateway(resource: any): resource is BraintreeGateway;
    relationship(id: string | ResourceId | null): BraintreeGatewayRel;
    type(): BraintreeGatewayType;
}
export default BraintreeGateways;
export type { BraintreeGateway, BraintreeGatewayCreate, BraintreeGatewayUpdate, BraintreeGatewayType };
