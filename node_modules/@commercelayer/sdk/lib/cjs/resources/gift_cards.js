"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class GiftCards extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: GiftCards.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: GiftCards.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: GiftCards.TYPE } : id, options);
    }
    async market(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'markets' }, `gift_cards/${_giftCardId}/market`, params, options);
    }
    async gift_card_recipient(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'gift_card_recipients' }, `gift_cards/${_giftCardId}/gift_card_recipient`, params, options);
    }
    async attachments(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'attachments' }, `gift_cards/${_giftCardId}/attachments`, params, options);
    }
    async events(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'events' }, `gift_cards/${_giftCardId}/events`, params, options);
    }
    async tags(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'tags' }, `gift_cards/${_giftCardId}/tags`, params, options);
    }
    async versions(giftCardId, params, options) {
        const _giftCardId = giftCardId.id || giftCardId;
        return this.resources.fetch({ type: 'versions' }, `gift_cards/${_giftCardId}/versions`, params, options);
    }
    async _purchase(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: GiftCards.TYPE, _purchase: true }, params, options);
    }
    async _activate(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: GiftCards.TYPE, _activate: true }, params, options);
    }
    async _deactivate(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: GiftCards.TYPE, _deactivate: true }, params, options);
    }
    async _balance_change_cents(id, triggerValue, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: GiftCards.TYPE, _balance_change_cents: triggerValue }, params, options);
    }
    isGiftCard(resource) {
        return resource.type && (resource.type === GiftCards.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: GiftCards.TYPE } : { id: id.id, type: GiftCards.TYPE };
    }
    type() {
        return GiftCards.TYPE;
    }
}
GiftCards.TYPE = 'gift_cards';
exports.default = GiftCards;
