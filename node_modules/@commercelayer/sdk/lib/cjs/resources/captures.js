"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Captures extends resource_1.ApiResource {
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Captures.TYPE }, params, options);
    }
    async order(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'orders' }, `captures/${_captureId}/order`, params, options);
    }
    async attachments(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'attachments' }, `captures/${_captureId}/attachments`, params, options);
    }
    async versions(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'versions' }, `captures/${_captureId}/versions`, params, options);
    }
    async reference_authorization(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'authorizations' }, `captures/${_captureId}/reference_authorization`, params, options);
    }
    async refunds(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'refunds' }, `captures/${_captureId}/refunds`, params, options);
    }
    async events(captureId, params, options) {
        const _captureId = captureId.id || captureId;
        return this.resources.fetch({ type: 'events' }, `captures/${_captureId}/events`, params, options);
    }
    async _refund(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Captures.TYPE, _refund: true }, params, options);
    }
    async _refund_amount_cents(id, triggerValue, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Captures.TYPE, _refund_amount_cents: triggerValue }, params, options);
    }
    isCapture(resource) {
        return resource.type && (resource.type === Captures.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Captures.TYPE } : { id: id.id, type: Captures.TYPE };
    }
    type() {
        return Captures.TYPE;
    }
}
Captures.TYPE = 'captures';
exports.default = Captures;
