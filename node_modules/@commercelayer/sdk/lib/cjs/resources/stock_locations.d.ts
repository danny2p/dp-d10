import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Address, AddressType } from './addresses';
import type { InventoryStockLocation } from './inventory_stock_locations';
import type { InventoryReturnLocation } from './inventory_return_locations';
import type { StockItem } from './stock_items';
import type { StockTransfer } from './stock_transfers';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type StockLocationType = 'stock_locations';
type StockLocationRel = ResourceRel & {
    type: StockLocationType;
};
type AddressRel = ResourceRel & {
    type: AddressType;
};
interface StockLocation extends Resource {
    readonly type: StockLocationType;
    number?: number | null;
    name: string;
    label_format?: string | null;
    suppress_etd?: boolean | null;
    address?: Address | null;
    inventory_stock_locations?: InventoryStockLocation[] | null;
    inventory_return_locations?: InventoryReturnLocation[] | null;
    stock_items?: StockItem[] | null;
    stock_transfers?: StockTransfer[] | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface StockLocationCreate extends ResourceCreate {
    name: string;
    label_format?: string | null;
    suppress_etd?: boolean | null;
    address: AddressRel;
}
interface StockLocationUpdate extends ResourceUpdate {
    name?: string | null;
    label_format?: string | null;
    suppress_etd?: boolean | null;
    address?: AddressRel | null;
}
declare class StockLocations extends ApiResource<StockLocation> {
    static readonly TYPE: StockLocationType;
    create(resource: StockLocationCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockLocation>;
    update(resource: StockLocationUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StockLocation>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    address(stockLocationId: string | StockLocation, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Address>;
    inventory_stock_locations(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<InventoryStockLocation>>;
    inventory_return_locations(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<InventoryReturnLocation>>;
    stock_items(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<StockItem>>;
    stock_transfers(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<StockTransfer>>;
    attachments(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(stockLocationId: string | StockLocation, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isStockLocation(resource: any): resource is StockLocation;
    relationship(id: string | ResourceId | null): StockLocationRel;
    type(): StockLocationType;
}
export default StockLocations;
export type { StockLocation, StockLocationCreate, StockLocationUpdate, StockLocationType };
