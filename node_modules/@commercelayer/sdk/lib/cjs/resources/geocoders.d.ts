import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsList } from '../query';
import type { Address } from './addresses';
import type { Attachment } from './attachments';
type GeocoderType = 'geocoders';
type GeocoderRel = ResourceRel & {
    type: GeocoderType;
};
interface Geocoder extends Resource {
    readonly type: GeocoderType;
    name: string;
    addresses?: Address[] | null;
    attachments?: Attachment[] | null;
}
declare class Geocoders extends ApiResource<Geocoder> {
    static readonly TYPE: GeocoderType;
    addresses(geocoderId: string | Geocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Address>>;
    attachments(geocoderId: string | Geocoder, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    isGeocoder(resource: any): resource is Geocoder;
    relationship(id: string | ResourceId | null): GeocoderRel;
    type(): GeocoderType;
}
export default Geocoders;
export type { Geocoder, GeocoderType };
