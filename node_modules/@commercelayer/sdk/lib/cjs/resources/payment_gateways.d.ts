import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsList } from '../query';
import type { PaymentMethod } from './payment_methods';
import type { Version } from './versions';
type PaymentGatewayType = 'payment_gateways';
type PaymentGatewayRel = ResourceRel & {
    type: PaymentGatewayType;
};
interface PaymentGateway extends Resource {
    readonly type: PaymentGatewayType;
    name: string;
    payment_methods?: PaymentMethod[] | null;
    versions?: Version[] | null;
}
declare class PaymentGateways extends ApiResource<PaymentGateway> {
    static readonly TYPE: PaymentGatewayType;
    payment_methods(paymentGatewayId: string | PaymentGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<PaymentMethod>>;
    versions(paymentGatewayId: string | PaymentGateway, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isPaymentGateway(resource: any): resource is PaymentGateway;
    relationship(id: string | ResourceId | null): PaymentGatewayRel;
    type(): PaymentGatewayType;
}
export default PaymentGateways;
export type { PaymentGateway, PaymentGatewayType };
