import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Address, AddressType } from './addresses';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type MerchantType = 'merchants';
type MerchantRel = ResourceRel & {
    type: MerchantType;
};
type AddressRel = ResourceRel & {
    type: AddressType;
};
interface Merchant extends Resource {
    readonly type: MerchantType;
    name: string;
    address?: Address | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
interface MerchantCreate extends ResourceCreate {
    name: string;
    address: AddressRel;
}
interface MerchantUpdate extends ResourceUpdate {
    name?: string | null;
    address?: AddressRel | null;
}
declare class Merchants extends ApiResource<Merchant> {
    static readonly TYPE: MerchantType;
    create(resource: MerchantCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Merchant>;
    update(resource: MerchantUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Merchant>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    address(merchantId: string | Merchant, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Address>;
    attachments(merchantId: string | Merchant, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(merchantId: string | Merchant, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isMerchant(resource: any): resource is Merchant;
    relationship(id: string | ResourceId | null): MerchantRel;
    type(): MerchantType;
}
export default Merchants;
export type { Merchant, MerchantCreate, MerchantUpdate, MerchantType };
