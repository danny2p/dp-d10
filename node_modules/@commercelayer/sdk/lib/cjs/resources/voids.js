"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Voids extends resource_1.ApiResource {
    async order(voidId, params, options) {
        const _voidId = voidId.id || voidId;
        return this.resources.fetch({ type: 'orders' }, `voids/${_voidId}/order`, params, options);
    }
    async attachments(voidId, params, options) {
        const _voidId = voidId.id || voidId;
        return this.resources.fetch({ type: 'attachments' }, `voids/${_voidId}/attachments`, params, options);
    }
    async versions(voidId, params, options) {
        const _voidId = voidId.id || voidId;
        return this.resources.fetch({ type: 'versions' }, `voids/${_voidId}/versions`, params, options);
    }
    async reference_authorization(voidId, params, options) {
        const _voidId = voidId.id || voidId;
        return this.resources.fetch({ type: 'authorizations' }, `voids/${_voidId}/reference_authorization`, params, options);
    }
    async events(voidId, params, options) {
        const _voidId = voidId.id || voidId;
        return this.resources.fetch({ type: 'events' }, `voids/${_voidId}/events`, params, options);
    }
    isVoid(resource) {
        return resource.type && (resource.type === Voids.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Voids.TYPE } : { id: id.id, type: Voids.TYPE };
    }
    type() {
        return Voids.TYPE;
    }
}
Voids.TYPE = 'voids';
exports.default = Voids;
