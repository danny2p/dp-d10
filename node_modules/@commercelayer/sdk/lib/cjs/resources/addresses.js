"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Addresses extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Addresses.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Addresses.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Addresses.TYPE } : id, options);
    }
    async geocoder(addressId, params, options) {
        const _addressId = addressId.id || addressId;
        return this.resources.fetch({ type: 'geocoders' }, `addresses/${_addressId}/geocoder`, params, options);
    }
    async events(addressId, params, options) {
        const _addressId = addressId.id || addressId;
        return this.resources.fetch({ type: 'events' }, `addresses/${_addressId}/events`, params, options);
    }
    async tags(addressId, params, options) {
        const _addressId = addressId.id || addressId;
        return this.resources.fetch({ type: 'tags' }, `addresses/${_addressId}/tags`, params, options);
    }
    async versions(addressId, params, options) {
        const _addressId = addressId.id || addressId;
        return this.resources.fetch({ type: 'versions' }, `addresses/${_addressId}/versions`, params, options);
    }
    isAddress(resource) {
        return resource.type && (resource.type === Addresses.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Addresses.TYPE } : { id: id.id, type: Addresses.TYPE };
    }
    type() {
        return Addresses.TYPE;
    }
}
Addresses.TYPE = 'addresses';
exports.default = Addresses;
