import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { PaymentGateway } from './payment_gateways';
import type { Version } from './versions';
type StripePaymentType = 'stripe_payments';
type StripePaymentRel = ResourceRel & {
    type: StripePaymentType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface StripePayment extends Resource {
    readonly type: StripePaymentType;
    client_secret: string;
    publishable_key?: string | null;
    options?: Record<string, any> | null;
    payment_method?: Record<string, any> | null;
    mismatched_amounts?: boolean | null;
    intent_amount_cents: number;
    intent_amount_float?: number | null;
    formatted_intent_amount?: string | null;
    return_url?: string | null;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    payment_gateway?: PaymentGateway | null;
    versions?: Version[] | null;
}
interface StripePaymentCreate extends ResourceCreate {
    options?: Record<string, any> | null;
    return_url?: string | null;
    order: OrderRel;
}
interface StripePaymentUpdate extends ResourceUpdate {
    options?: Record<string, any> | null;
    return_url?: string | null;
    _update?: boolean | null;
    _refresh?: boolean | null;
    order?: OrderRel | null;
}
declare class StripePayments extends ApiResource<StripePayment> {
    static readonly TYPE: StripePaymentType;
    create(resource: StripePaymentCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StripePayment>;
    update(resource: StripePaymentUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StripePayment>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(stripePaymentId: string | StripePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    payment_gateway(stripePaymentId: string | StripePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<PaymentGateway>;
    versions(stripePaymentId: string | StripePayment, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _update(id: string | StripePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StripePayment>;
    _refresh(id: string | StripePayment, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<StripePayment>;
    isStripePayment(resource: any): resource is StripePayment;
    relationship(id: string | ResourceId | null): StripePaymentRel;
    type(): StripePaymentType;
}
export default StripePayments;
export type { StripePayment, StripePaymentCreate, StripePaymentUpdate, StripePaymentType };
