"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class StripePayments extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: StripePayments.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: StripePayments.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: StripePayments.TYPE } : id, options);
    }
    async order(stripePaymentId, params, options) {
        const _stripePaymentId = stripePaymentId.id || stripePaymentId;
        return this.resources.fetch({ type: 'orders' }, `stripe_payments/${_stripePaymentId}/order`, params, options);
    }
    async payment_gateway(stripePaymentId, params, options) {
        const _stripePaymentId = stripePaymentId.id || stripePaymentId;
        return this.resources.fetch({ type: 'payment_gateways' }, `stripe_payments/${_stripePaymentId}/payment_gateway`, params, options);
    }
    async versions(stripePaymentId, params, options) {
        const _stripePaymentId = stripePaymentId.id || stripePaymentId;
        return this.resources.fetch({ type: 'versions' }, `stripe_payments/${_stripePaymentId}/versions`, params, options);
    }
    async _update(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StripePayments.TYPE, _update: true }, params, options);
    }
    async _refresh(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StripePayments.TYPE, _refresh: true }, params, options);
    }
    isStripePayment(resource) {
        return resource.type && (resource.type === StripePayments.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: StripePayments.TYPE } : { id: id.id, type: StripePayments.TYPE };
    }
    type() {
        return StripePayments.TYPE;
    }
}
StripePayments.TYPE = 'stripe_payments';
exports.default = StripePayments;
