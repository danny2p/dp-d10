import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Event } from './events';
import type { Version } from './versions';
type CleanupType = 'cleanups';
type CleanupRel = ResourceRel & {
    type: CleanupType;
};
interface Cleanup extends Resource {
    readonly type: CleanupType;
    resource_type: string;
    status: 'pending' | 'in_progress' | 'interrupted' | 'completed';
    started_at?: string | null;
    completed_at?: string | null;
    interrupted_at?: string | null;
    filters?: Record<string, any> | null;
    records_count?: number | null;
    errors_count?: number | null;
    processed_count?: number | null;
    errors_log?: Record<string, any> | null;
    events?: Event[] | null;
    versions?: Version[] | null;
}
interface CleanupCreate extends ResourceCreate {
    resource_type: string;
    filters?: Record<string, any> | null;
}
declare class Cleanups extends ApiResource<Cleanup> {
    static readonly TYPE: CleanupType;
    create(resource: CleanupCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Cleanup>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    events(cleanupId: string | Cleanup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    versions(cleanupId: string | Cleanup, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isCleanup(resource: any): resource is Cleanup;
    relationship(id: string | ResourceId | null): CleanupRel;
    type(): CleanupType;
}
export default Cleanups;
export type { Cleanup, CleanupCreate, CleanupType };
