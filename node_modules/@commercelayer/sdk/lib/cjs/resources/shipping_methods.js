"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class ShippingMethods extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: ShippingMethods.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: ShippingMethods.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: ShippingMethods.TYPE } : id, options);
    }
    async market(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'markets' }, `shipping_methods/${_shippingMethodId}/market`, params, options);
    }
    async shipping_zone(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'shipping_zones' }, `shipping_methods/${_shippingMethodId}/shipping_zone`, params, options);
    }
    async shipping_category(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'shipping_categories' }, `shipping_methods/${_shippingMethodId}/shipping_category`, params, options);
    }
    async stock_location(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'stock_locations' }, `shipping_methods/${_shippingMethodId}/stock_location`, params, options);
    }
    async delivery_lead_time_for_shipment(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'delivery_lead_times' }, `shipping_methods/${_shippingMethodId}/delivery_lead_time_for_shipment`, params, options);
    }
    async shipping_method_tiers(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'shipping_method_tiers' }, `shipping_methods/${_shippingMethodId}/shipping_method_tiers`, params, options);
    }
    async shipping_weight_tiers(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'shipping_weight_tiers' }, `shipping_methods/${_shippingMethodId}/shipping_weight_tiers`, params, options);
    }
    async attachments(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'attachments' }, `shipping_methods/${_shippingMethodId}/attachments`, params, options);
    }
    async versions(shippingMethodId, params, options) {
        const _shippingMethodId = shippingMethodId.id || shippingMethodId;
        return this.resources.fetch({ type: 'versions' }, `shipping_methods/${_shippingMethodId}/versions`, params, options);
    }
    async _disable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: ShippingMethods.TYPE, _disable: true }, params, options);
    }
    async _enable(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: ShippingMethods.TYPE, _enable: true }, params, options);
    }
    isShippingMethod(resource) {
        return resource.type && (resource.type === ShippingMethods.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: ShippingMethods.TYPE } : { id: id.id, type: ShippingMethods.TYPE };
    }
    type() {
        return ShippingMethods.TYPE;
    }
}
ShippingMethods.TYPE = 'shipping_methods';
exports.default = ShippingMethods;
