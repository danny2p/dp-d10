import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Market, MarketType } from './markets';
import type { Attachment } from './attachments';
import type { Event } from './events';
import type { Tag, TagType } from './tags';
import type { Version } from './versions';
type SkuOptionType = 'sku_options';
type SkuOptionRel = ResourceRel & {
    type: SkuOptionType;
};
type MarketRel = ResourceRel & {
    type: MarketType;
};
type TagRel = ResourceRel & {
    type: TagType;
};
interface SkuOption extends Resource {
    readonly type: SkuOptionType;
    name: string;
    currency_code?: string | null;
    description?: string | null;
    price_amount_cents?: number | null;
    price_amount_float?: number | null;
    formatted_price_amount?: string | null;
    delay_hours?: number | null;
    delay_days?: number | null;
    sku_code_regex?: string | null;
    market?: Market | null;
    attachments?: Attachment[] | null;
    events?: Event[] | null;
    tags?: Tag[] | null;
    versions?: Version[] | null;
}
interface SkuOptionCreate extends ResourceCreate {
    name: string;
    currency_code?: string | null;
    description?: string | null;
    price_amount_cents?: number | null;
    delay_hours?: number | null;
    sku_code_regex?: string | null;
    market?: MarketRel | null;
    tags?: TagRel[] | null;
}
interface SkuOptionUpdate extends ResourceUpdate {
    name?: string | null;
    currency_code?: string | null;
    description?: string | null;
    price_amount_cents?: number | null;
    delay_hours?: number | null;
    sku_code_regex?: string | null;
    market?: MarketRel | null;
    tags?: TagRel[] | null;
}
declare class SkuOptions extends ApiResource<SkuOption> {
    static readonly TYPE: SkuOptionType;
    create(resource: SkuOptionCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SkuOption>;
    update(resource: SkuOptionUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SkuOption>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    market(skuOptionId: string | SkuOption, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Market>;
    attachments(skuOptionId: string | SkuOption, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    events(skuOptionId: string | SkuOption, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    tags(skuOptionId: string | SkuOption, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Tag>>;
    versions(skuOptionId: string | SkuOption, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isSkuOption(resource: any): resource is SkuOption;
    relationship(id: string | ResourceId | null): SkuOptionRel;
    type(): SkuOptionType;
}
export default SkuOptions;
export type { SkuOption, SkuOptionCreate, SkuOptionUpdate, SkuOptionType };
