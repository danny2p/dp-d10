import { ApiResource } from '../resource';
import type { Resource, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order } from './orders';
import type { Attachment } from './attachments';
import type { Version } from './versions';
type TransactionType = 'transactions';
type TransactionRel = ResourceRel & {
    type: TransactionType;
};
interface Transaction extends Resource {
    readonly type: TransactionType;
    number: string;
    currency_code: string;
    amount_cents: number;
    amount_float: number;
    formatted_amount: string;
    succeeded: boolean;
    message?: string | null;
    error_code?: string | null;
    error_detail?: string | null;
    token?: string | null;
    gateway_transaction_id?: string | null;
    order?: Order | null;
    attachments?: Attachment[] | null;
    versions?: Version[] | null;
}
declare class Transactions extends ApiResource<Transaction> {
    static readonly TYPE: TransactionType;
    order(transactionId: string | Transaction, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    attachments(transactionId: string | Transaction, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Attachment>>;
    versions(transactionId: string | Transaction, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isTransaction(resource: any): resource is Transaction;
    relationship(id: string | ResourceId | null): TransactionRel;
    type(): TransactionType;
}
export default Transactions;
export type { Transaction, TransactionType };
