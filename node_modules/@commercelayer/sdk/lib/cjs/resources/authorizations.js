"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Authorizations extends resource_1.ApiResource {
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Authorizations.TYPE }, params, options);
    }
    async order(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'orders' }, `authorizations/${_authorizationId}/order`, params, options);
    }
    async attachments(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'attachments' }, `authorizations/${_authorizationId}/attachments`, params, options);
    }
    async versions(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'versions' }, `authorizations/${_authorizationId}/versions`, params, options);
    }
    async captures(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'captures' }, `authorizations/${_authorizationId}/captures`, params, options);
    }
    async voids(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'voids' }, `authorizations/${_authorizationId}/voids`, params, options);
    }
    async events(authorizationId, params, options) {
        const _authorizationId = authorizationId.id || authorizationId;
        return this.resources.fetch({ type: 'events' }, `authorizations/${_authorizationId}/events`, params, options);
    }
    async _capture(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Authorizations.TYPE, _capture: true }, params, options);
    }
    async _capture_amount_cents(id, triggerValue, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Authorizations.TYPE, _capture_amount_cents: triggerValue }, params, options);
    }
    async _void(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: Authorizations.TYPE, _void: true }, params, options);
    }
    isAuthorization(resource) {
        return resource.type && (resource.type === Authorizations.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Authorizations.TYPE } : { id: id.id, type: Authorizations.TYPE };
    }
    type() {
        return Authorizations.TYPE;
    }
}
Authorizations.TYPE = 'authorizations';
exports.default = Authorizations;
