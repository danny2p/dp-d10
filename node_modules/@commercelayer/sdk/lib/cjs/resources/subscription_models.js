"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class SubscriptionModels extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: SubscriptionModels.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: SubscriptionModels.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: SubscriptionModels.TYPE } : id, options);
    }
    async markets(subscriptionModelId, params, options) {
        const _subscriptionModelId = subscriptionModelId.id || subscriptionModelId;
        return this.resources.fetch({ type: 'markets' }, `subscription_models/${_subscriptionModelId}/markets`, params, options);
    }
    async order_subscriptions(subscriptionModelId, params, options) {
        const _subscriptionModelId = subscriptionModelId.id || subscriptionModelId;
        return this.resources.fetch({ type: 'order_subscriptions' }, `subscription_models/${_subscriptionModelId}/order_subscriptions`, params, options);
    }
    async attachments(subscriptionModelId, params, options) {
        const _subscriptionModelId = subscriptionModelId.id || subscriptionModelId;
        return this.resources.fetch({ type: 'attachments' }, `subscription_models/${_subscriptionModelId}/attachments`, params, options);
    }
    isSubscriptionModel(resource) {
        return resource.type && (resource.type === SubscriptionModels.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: SubscriptionModels.TYPE } : { id: id.id, type: SubscriptionModels.TYPE };
    }
    type() {
        return SubscriptionModels.TYPE;
    }
}
SubscriptionModels.TYPE = 'subscription_models';
exports.default = SubscriptionModels;
