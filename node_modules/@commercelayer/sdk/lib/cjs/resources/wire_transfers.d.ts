import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Order, OrderType } from './orders';
import type { Version } from './versions';
type WireTransferType = 'wire_transfers';
type WireTransferRel = ResourceRel & {
    type: WireTransferType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
interface WireTransfer extends Resource {
    readonly type: WireTransferType;
    payment_instrument?: Record<string, any> | null;
    order?: Order | null;
    versions?: Version[] | null;
}
interface WireTransferCreate extends ResourceCreate {
    order: OrderRel;
}
interface WireTransferUpdate extends ResourceUpdate {
    order?: OrderRel | null;
}
declare class WireTransfers extends ApiResource<WireTransfer> {
    static readonly TYPE: WireTransferType;
    create(resource: WireTransferCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<WireTransfer>;
    update(resource: WireTransferUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<WireTransfer>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    order(wireTransferId: string | WireTransfer, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    versions(wireTransferId: string | WireTransfer, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    isWireTransfer(resource: any): resource is WireTransfer;
    relationship(id: string | ResourceId | null): WireTransferRel;
    type(): WireTransferType;
}
export default WireTransfers;
export type { WireTransfer, WireTransferCreate, WireTransferUpdate, WireTransferType };
