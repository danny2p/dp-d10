"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Prices extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Prices.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Prices.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Prices.TYPE } : id, options);
    }
    async price_list(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'price_lists' }, `prices/${_priceId}/price_list`, params, options);
    }
    async sku(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'skus' }, `prices/${_priceId}/sku`, params, options);
    }
    async price_tiers(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'price_tiers' }, `prices/${_priceId}/price_tiers`, params, options);
    }
    async price_volume_tiers(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'price_volume_tiers' }, `prices/${_priceId}/price_volume_tiers`, params, options);
    }
    async price_frequency_tiers(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'price_frequency_tiers' }, `prices/${_priceId}/price_frequency_tiers`, params, options);
    }
    async attachments(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'attachments' }, `prices/${_priceId}/attachments`, params, options);
    }
    async versions(priceId, params, options) {
        const _priceId = priceId.id || priceId;
        return this.resources.fetch({ type: 'versions' }, `prices/${_priceId}/versions`, params, options);
    }
    isPrice(resource) {
        return resource.type && (resource.type === Prices.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Prices.TYPE } : { id: id.id, type: Prices.TYPE };
    }
    type() {
        return Prices.TYPE;
    }
}
Prices.TYPE = 'prices';
exports.default = Prices;
