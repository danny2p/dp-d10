"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class Packages extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: Packages.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: Packages.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: Packages.TYPE } : id, options);
    }
    async stock_location(packageId, params, options) {
        const _packageId = packageId.id || packageId;
        return this.resources.fetch({ type: 'stock_locations' }, `packages/${_packageId}/stock_location`, params, options);
    }
    async parcels(packageId, params, options) {
        const _packageId = packageId.id || packageId;
        return this.resources.fetch({ type: 'parcels' }, `packages/${_packageId}/parcels`, params, options);
    }
    async attachments(packageId, params, options) {
        const _packageId = packageId.id || packageId;
        return this.resources.fetch({ type: 'attachments' }, `packages/${_packageId}/attachments`, params, options);
    }
    async versions(packageId, params, options) {
        const _packageId = packageId.id || packageId;
        return this.resources.fetch({ type: 'versions' }, `packages/${_packageId}/versions`, params, options);
    }
    isPackage(resource) {
        return resource.type && (resource.type === Packages.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: Packages.TYPE } : { id: id.id, type: Packages.TYPE };
    }
    type() {
        return Packages.TYPE;
    }
}
Packages.TYPE = 'packages';
exports.default = Packages;
