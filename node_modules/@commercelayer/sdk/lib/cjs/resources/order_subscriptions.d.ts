import { ApiResource } from '../resource';
import type { Resource, ResourceCreate, ResourceUpdate, ResourceId, ResourcesConfig, ResourceRel, ListResponse } from '../resource';
import type { QueryParamsRetrieve, QueryParamsList } from '../query';
import type { Market, MarketType } from './markets';
import type { SubscriptionModel } from './subscription_models';
import type { Order, OrderType } from './orders';
import type { Customer } from './customers';
import type { CustomerPaymentSource, CustomerPaymentSourceType } from './customer_payment_sources';
import type { OrderSubscriptionItem } from './order_subscription_items';
import type { OrderFactory } from './order_factories';
import type { RecurringOrderCopy } from './recurring_order_copies';
import type { Event } from './events';
import type { Version } from './versions';
type OrderSubscriptionType = 'order_subscriptions';
type OrderSubscriptionRel = ResourceRel & {
    type: OrderSubscriptionType;
};
type MarketRel = ResourceRel & {
    type: MarketType;
};
type OrderRel = ResourceRel & {
    type: OrderType;
};
type CustomerPaymentSourceRel = ResourceRel & {
    type: CustomerPaymentSourceType;
};
interface OrderSubscription extends Resource {
    readonly type: OrderSubscriptionType;
    number?: string | null;
    status: 'draft' | 'inactive' | 'active' | 'cancelled';
    frequency: string;
    activate_by_source_order?: boolean | null;
    customer_email?: string | null;
    starts_at?: string | null;
    expires_at?: string | null;
    next_run_at?: string | null;
    occurrencies?: number | null;
    errors_count?: number | null;
    succeeded_on_last_run?: boolean | null;
    options?: Record<string, any> | null;
    market?: Market | null;
    subscription_model?: SubscriptionModel | null;
    source_order?: Order | null;
    customer?: Customer | null;
    customer_payment_source?: CustomerPaymentSource | null;
    order_subscription_items?: OrderSubscriptionItem[] | null;
    order_factories?: OrderFactory[] | null;
    /**
    * @deprecated This field should not be used as it may be removed in the future without notice
    */
    order_copies?: object[];
    recurring_order_copies?: RecurringOrderCopy[] | null;
    orders?: Order[] | null;
    events?: Event[] | null;
    versions?: Version[] | null;
}
interface OrderSubscriptionCreate extends ResourceCreate {
    frequency: string;
    activate_by_source_order?: boolean | null;
    starts_at?: string | null;
    expires_at?: string | null;
    options?: Record<string, any> | null;
    market?: MarketRel | null;
    source_order: OrderRel;
}
interface OrderSubscriptionUpdate extends ResourceUpdate {
    frequency?: string | null;
    expires_at?: string | null;
    next_run_at?: string | null;
    _activate?: boolean | null;
    _deactivate?: boolean | null;
    _cancel?: boolean | null;
    customer_payment_source?: CustomerPaymentSourceRel | null;
}
declare class OrderSubscriptions extends ApiResource<OrderSubscription> {
    static readonly TYPE: OrderSubscriptionType;
    create(resource: OrderSubscriptionCreate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<OrderSubscription>;
    update(resource: OrderSubscriptionUpdate, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<OrderSubscription>;
    delete(id: string | ResourceId, options?: ResourcesConfig): Promise<void>;
    market(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Market>;
    subscription_model(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<SubscriptionModel>;
    source_order(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Order>;
    customer(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<Customer>;
    customer_payment_source(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<CustomerPaymentSource>;
    order_subscription_items(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<OrderSubscriptionItem>>;
    order_factories(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<OrderFactory>>;
    recurring_order_copies(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<RecurringOrderCopy>>;
    orders(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Order>>;
    events(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Event>>;
    versions(orderSubscriptionId: string | OrderSubscription, params?: QueryParamsList, options?: ResourcesConfig): Promise<ListResponse<Version>>;
    _activate(id: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<OrderSubscription>;
    _deactivate(id: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<OrderSubscription>;
    _cancel(id: string | OrderSubscription, params?: QueryParamsRetrieve, options?: ResourcesConfig): Promise<OrderSubscription>;
    isOrderSubscription(resource: any): resource is OrderSubscription;
    relationship(id: string | ResourceId | null): OrderSubscriptionRel;
    type(): OrderSubscriptionType;
}
export default OrderSubscriptions;
export type { OrderSubscription, OrderSubscriptionCreate, OrderSubscriptionUpdate, OrderSubscriptionType };
