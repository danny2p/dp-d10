"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resource_1 = require("../resource");
class StockTransfers extends resource_1.ApiResource {
    async create(resource, params, options) {
        return this.resources.create({ ...resource, type: StockTransfers.TYPE }, params, options);
    }
    async update(resource, params, options) {
        return this.resources.update({ ...resource, type: StockTransfers.TYPE }, params, options);
    }
    async delete(id, options) {
        await this.resources.delete((typeof id === 'string') ? { id, type: StockTransfers.TYPE } : id, options);
    }
    async sku(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'skus' }, `stock_transfers/${_stockTransferId}/sku`, params, options);
    }
    async origin_stock_location(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'stock_locations' }, `stock_transfers/${_stockTransferId}/origin_stock_location`, params, options);
    }
    async destination_stock_location(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'stock_locations' }, `stock_transfers/${_stockTransferId}/destination_stock_location`, params, options);
    }
    async shipment(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'shipments' }, `stock_transfers/${_stockTransferId}/shipment`, params, options);
    }
    async line_item(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'line_items' }, `stock_transfers/${_stockTransferId}/line_item`, params, options);
    }
    async events(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'events' }, `stock_transfers/${_stockTransferId}/events`, params, options);
    }
    async versions(stockTransferId, params, options) {
        const _stockTransferId = stockTransferId.id || stockTransferId;
        return this.resources.fetch({ type: 'versions' }, `stock_transfers/${_stockTransferId}/versions`, params, options);
    }
    async _upcoming(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StockTransfers.TYPE, _upcoming: true }, params, options);
    }
    async _picking(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StockTransfers.TYPE, _picking: true }, params, options);
    }
    async _in_transit(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StockTransfers.TYPE, _in_transit: true }, params, options);
    }
    async _complete(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StockTransfers.TYPE, _complete: true }, params, options);
    }
    async _cancel(id, params, options) {
        return this.resources.update({ id: (typeof id === 'string') ? id : id.id, type: StockTransfers.TYPE, _cancel: true }, params, options);
    }
    isStockTransfer(resource) {
        return resource.type && (resource.type === StockTransfers.TYPE);
    }
    relationship(id) {
        return ((id === null) || (typeof id === 'string')) ? { id, type: StockTransfers.TYPE } : { id: id.id, type: StockTransfers.TYPE };
    }
    type() {
        return StockTransfers.TYPE;
    }
}
StockTransfers.TYPE = 'stock_transfers';
exports.default = StockTransfers;
